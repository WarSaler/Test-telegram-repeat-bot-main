# bot.py

import os
import logging
import threading
import time
from datetime import datetime, time as dt_time, timedelta
import json
import pytz
import requests
from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, Job, ConversationHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram.error import Conflict, BadRequest
import html
from http.server import BaseHTTPRequestHandler, HTTPServer

# ‚úÖ –ò–ú–ü–û–†–¢ GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
try:
    from sheets_integration import SheetsManager
    sheets_manager = SheetsManager()
    SHEETS_AVAILABLE = True
    logger_temp = logging.getLogger(__name__)
    logger_temp.info("‚úÖ Google Sheets integration loaded successfully")
except Exception as e:
    sheets_manager = None
    SHEETS_AVAILABLE = False
    logger_temp = logging.getLogger(__name__)
    logger_temp.warning(f"üìµ Google Sheets integration not available: {e}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
BOT_START_TIME = None

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'OK')

    def do_HEAD(self):
        # Respond to health check HEAD requests
        self.send_response(200)
        self.end_headers()

def start_health_server():
    port = int(os.environ.get('PORT', 5000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    server.serve_forever()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
REMINDERS_FILE = "reminders.json"
POLLS_FILE = "polls.json"

logging.basicConfig(
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(MOSCOW_TZ)

def moscow_time_to_utc(moscow_dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC"""
    if isinstance(moscow_dt, str):
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ–µ –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        naive_dt = datetime.strptime(moscow_dt, "%Y-%m-%d %H:%M")
        moscow_dt = MOSCOW_TZ.localize(naive_dt)
    elif moscow_dt.tzinfo is None:
        # –ï—Å–ª–∏ naive datetime, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º
        moscow_dt = MOSCOW_TZ.localize(moscow_dt)
    
    return moscow_dt.astimezone(pytz.UTC)

def utc_to_moscow_time(utc_dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ"""
    if utc_dt.tzinfo is None:
        utc_dt = pytz.UTC.localize(utc_dt)
    return utc_dt.astimezone(MOSCOW_TZ)

def format_moscow_time(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if isinstance(dt, str):
        return dt
    moscow_dt = utc_to_moscow_time(dt) if dt.tzinfo else MOSCOW_TZ.localize(dt)
    return moscow_dt.strftime("%Y-%m-%d %H:%M MSK")

def error_handler(update: Update, context: CallbackContext):
    """
    Handle errors by logging them without crashing the bot.
    Enhanced conflict handling with automatic restart mechanism.
    """
    if isinstance(context.error, Conflict):
        logger.error("üö® CRITICAL: Bot conflict detected - multiple instances running!")
        logger.error("   This blocks ALL scheduled tasks (reminders, polls, etc.)")
        logger.error("   Conflict details: {}".format(str(context.error)))
        logger.error("   Attempting aggressive conflict resolution...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π updater
            if hasattr(context, 'dispatcher') and hasattr(context.dispatcher, 'updater'):
                updater = context.dispatcher.updater
                logger.warning("üîÑ Stopping current updater to resolve conflict...")
                updater.stop()
                
                # –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                time.sleep(5)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling
                try:
                    updater.bot.delete_webhook(drop_pending_updates=True)
                    logger.info("‚úÖ Webhook deleted during conflict resolution")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Could not delete webhook: {e}")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                time.sleep(3)
                updater.start_polling(drop_pending_updates=True, timeout=15, read_latency=10)
                logger.info("üöÄ Bot restarted after conflict resolution")
                
        except Exception as restart_error:
            logger.error(f"‚ùå Failed to restart bot after conflict: {restart_error}")
            logger.error("   Manual intervention may be required on Render platform")
        
        return
    elif isinstance(context.error, BadRequest):
        logger.warning(f"‚ö†Ô∏è Bad request: {context.error}")
        return
    
    logger.error("‚ùå Uncaught exception:", exc_info=context.error)

def subscribe_chat(chat_id, chat_name="Unknown", chat_type="private", members_count=None):
    try:
        with open("subscribed_chats.json", "r") as f:
            data = f.read().strip()
            chats = json.loads(data) if data else []
    except (FileNotFoundError, json.JSONDecodeError):
        chats = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –Ω–æ–≤—ã–º
    is_new_chat = chat_id not in chats
    
    if is_new_chat:
        chats.append(chat_id)
        save_chats(chats)
        logger.info(f"üÜï New chat subscribed: {chat_id} ({chat_name})")
        
        # ‚úÖ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ó–ê–ü–ò–°–¨ –í GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                sheets_manager.update_chat_stats(chat_id, chat_name, chat_type, members_count)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="CHAT_SUBSCRIBE",
                    user_id="SYSTEM",
                    username="AutoSubscribe",
                    chat_id=chat_id,
                    details=f"New chat subscribed: {chat_name} ({chat_type}), Members: {members_count or 'N/A'}",
                    reminder_id=""
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ Google Sheets
                sheets_manager.sync_subscribed_chats_to_sheets(chats)
                
                logger.info(f"üìä Successfully synced new chat {chat_id} to Google Sheets")
                
            except Exception as e:
                logger.error(f"‚ùå Error syncing new chat to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - chat {chat_id} subscription not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for new chat sync")
    else:
        # –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_manager.update_chat_stats(chat_id, chat_name, chat_type, members_count)
                logger.info(f"üìä Updated existing chat {chat_id} info in Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error updating chat info in Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - chat {chat_id} info not updated")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")

def save_chats(chats):
    with open("subscribed_chats.json", "w") as f:
        json.dump(chats, f)

# –§—É–Ω–∫—Ü–∏—è ping –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
def ping_self(context: CallbackContext):
    """
    –ü–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞—Ç—å –Ω–∞ Render free tier
    """
    try:
        base_url = os.environ.get('BASE_URL', 'https://telegram-repeat-bot.onrender.com')
        response = requests.get(base_url, timeout=5)
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"Self-ping successful at {moscow_time}: {response.status_code}")
    except Exception as e:
        logger.warning(f"Self-ping failed: {e}")

def safe_html_escape(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏
    """
    if not text:
        return ""
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤
    allowed_tags = ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>', '<s>', '</s>', '<code>', '</code>', '<pre>', '</pre>']
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —Ç–µ–≥–∞—Ö <a>
        if '<a ' in text and 'href=""' in text:
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
            text = text.replace('<a href="">', '').replace('</a>', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö —Ç–µ–≥–æ–≤
        if '<' in text and '>' in text:
            # –ï—Å–ª–∏ –µ—Å—Ç—å HTML —Ç–µ–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return text
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç HTML —Ç–µ–≥–æ–≤, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            return html.escape(text)
    except:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        return html.escape(text)

# --- /start –∏ /test –∫–æ–º–∞–Ω–¥—ã ---
def start(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    try:
        chat_id = update.effective_chat.id
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"Received /start from chat {chat_id} at {moscow_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = update.effective_chat
        chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
        chat_type = chat.type
        members_count = None
        try:
            if chat_type in ["group", "supergroup"]:
                members_count = context.bot.get_chat_members_count(chat_id)
        except:
            pass
        
        subscribe_chat(chat_id, chat_name, chat_type, members_count)
        context.bot.send_message(chat_id=chat_id,
                                 text="‚úÖ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>\n‚è∞ <i>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</i>",
                                 parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        try:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)")
        except:
            pass

def test(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    try:
        chat_id = update.effective_chat.id
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"Received /test from chat {chat_id} at {moscow_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = update.effective_chat
        chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
        chat_type = chat.type
        members_count = None
        try:
            if chat_type in ["group", "supergroup"]:
                members_count = context.bot.get_chat_members_count(chat_id)
        except:
            pass
        
        subscribe_chat(chat_id, chat_name, chat_type, members_count)
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
        context.bot.send_message(chat_id=chat_id,
                                 text=f"‚úÖ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</b>\n‚è∞ <i>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}</i>",
                                 parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error in test command: {e}")
        try:
            current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
            context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
        except:
            pass

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
REMINDER_DATE, REMINDER_TEXT = range(2)
DAILY_TIME, DAILY_TEXT = range(2)
WEEKLY_DAY, WEEKLY_TIME, WEEKLY_TEXT = range(3)
REM_DEL_ID = 0

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π ---
POLL_DATE, POLL_QUESTION, POLL_OPTIONS = range(3)
DAILY_POLL_TIME, DAILY_POLL_QUESTION, DAILY_POLL_OPTIONS = range(3)
WEEKLY_POLL_DAY, WEEKLY_POLL_TIME, WEEKLY_POLL_QUESTION, WEEKLY_POLL_OPTIONS = range(4)
POLL_DEL_ID = 0

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫) ---
def load_reminders():
    """
    Load reminders from the JSON file, returning an empty list if the file is missing,
    empty, or contains invalid JSON.
    """
    try:
        with open(REMINDERS_FILE, "r", encoding='utf-8') as f:
            data = f.read().strip()
            if not data:
                return []
            return json.loads(data)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_reminders(reminders):
    try:
        with open(REMINDERS_FILE, "w", encoding='utf-8') as f:
            json.dump(reminders, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving reminders: {e}")

def get_next_reminder_id():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    try:
        reminders = load_reminders()
        if not reminders:
            return "1"
        
        # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏ –¥–æ–±–∞–≤–∏—Ç—å 1
        max_id = 0
        for reminder in reminders:
            try:
                reminder_id = int(reminder.get("id", "0"))
                if reminder_id > max_id:
                    max_id = reminder_id
            except ValueError:
                continue
        
        return str(max_id + 1)
    except Exception as e:
        logger.error(f"Error generating reminder ID: {e}")
        return "1"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π ---
def load_polls():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
    –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.
    """
    try:
        with open(POLLS_FILE, "r", encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                logger.info("Polls file is empty, returning empty list")
                return []
            polls = json.loads(content)
            logger.info(f"Loaded {len(polls)} polls from {POLLS_FILE}")
            return polls
    except FileNotFoundError:
        logger.info(f"Polls file {POLLS_FILE} not found, returning empty list")
        return []
    except json.JSONDecodeError as e:
        logger.error(f"Invalid JSON in {POLLS_FILE}: {e}. Returning empty list.")
        return []
    except Exception as e:
        logger.error(f"Error loading polls: {e}")
        return []

def save_polls(polls):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(POLLS_FILE, "w", encoding='utf-8') as f:
            json.dump(polls, f, ensure_ascii=False, indent=2)
        logger.info(f"Saved {len(polls)} polls to {POLLS_FILE}")
    except Exception as e:
        logger.error(f"Error saving polls: {e}")

def get_next_poll_id():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    """
    try:
        polls = load_polls()
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID
        sheets_max_id = 0
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_max_id = sheets_manager.get_max_poll_id()
            except Exception as e:
                logger.warning(f"Could not get max ID from sheets: {e}")
        
        # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        local_max_id = 0
        if polls:
            for poll in polls:
                try:
                    poll_id = int(poll.get("id", "0"))
                    if poll_id > local_max_id:
                        local_max_id = poll_id
                except ValueError:
                    continue
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ –æ–±–µ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        max_id = max(local_max_id, sheets_max_id)
        return str(max_id + 1)
        
    except Exception as e:
        logger.error(f"Error generating poll ID: {e}")
        return "1"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_add_one_reminder(update: Update, context: CallbackContext):
    try:
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
        update.message.reply_text(f"üìÖ <b>–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-07-10 16:30\n\n<i>‚è∞ –°–µ–π—á–∞—Å: {current_time}</i>", parse_mode=ParseMode.HTML)
        return REMINDER_DATE
    except Exception as e:
        logger.error(f"Error in start_add_one_reminder: {e}")
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
        update.message.reply_text(f"üìÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-07-10 16:30\n\n‚è∞ –°–µ–π—á–∞—Å: {current_time}")
        return REMINDER_DATE

def receive_reminder_datetime(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        moscow_dt = datetime.strptime(text, "%Y-%m-%d %H:%M")
        moscow_dt = MOSCOW_TZ.localize(moscow_dt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if moscow_dt < get_moscow_time():
            try:
                update.message.reply_text("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏:", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
            return REMINDER_DATE
        
        context.user_data["reminder_datetime"] = text
        context.user_data["reminder_datetime_moscow"] = moscow_dt
        try:
            update.message.reply_text("‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return REMINDER_TEXT
    except Exception:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):")
        return REMINDER_DATE

def receive_reminder_text(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        new_id = get_next_reminder_id()
        reminder_text = update.message.text_html if update.message.text_html else update.message.text.strip()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML
        reminder_text = safe_html_escape(reminder_text)
        
        reminders.append({
            "id": new_id,
            "type": "once",
            "datetime": context.user_data["reminder_datetime"],
            "text": reminder_text
        })
        save_reminders(reminders)
        
        # ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                sheets_manager.log_reminder_action("CREATE", update.effective_user.id, username, chat_id, f"Created reminder: {reminder_text[:50]}...", new_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_data = {
                    "id": new_id,
                    "text": reminder_text,
                    "time": context.user_data["reminder_datetime"],
                    "type": "once",
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": get_moscow_time().strftime("%Y-%m-%d %H:%M:%S"),
                    "username": username
                }
                sheets_manager.sync_reminder(reminder_data, "CREATE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced reminder #{new_id} to Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error syncing reminder to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - reminder #{new_id} not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for reminder sync")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(context.dispatcher.job_queue, reminders[-1])
        
        try:
            update.message.reply_text(
                f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                f"üìÖ <i>{context.user_data['reminder_datetime']}</i>\n"
                f"üí¨ {reminder_text}", 
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {context.user_data['reminder_datetime']}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in receive_reminder_text: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_add_daily_reminder(update: Update, context: CallbackContext):
    try:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üîÑ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00\n\n<i>‚è∞ –°–µ–π—á–∞—Å: {current_time}</i>", parse_mode=ParseMode.HTML)
        return DAILY_TIME
    except:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00\n\n‚è∞ –°–µ–π—á–∞—Å: {current_time}")
        return DAILY_TIME

def receive_daily_time(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        time.strptime(text, "%H:%M")
        context.user_data["daily_time"] = text
        try:
            update.message.reply_text("‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏):\n<i>‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</i>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:\n‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)")
        return DAILY_TEXT
    except Exception:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):")
        return DAILY_TIME

def receive_daily_text(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        new_id = get_next_reminder_id()
        reminder_text = update.message.text_html if update.message.text_html else update.message.text.strip()
        reminder_text = safe_html_escape(reminder_text)
        
        reminders.append({
            "id": new_id,
            "type": "daily",
            "time": context.user_data["daily_time"],
            "text": reminder_text
        })
        save_reminders(reminders)
        
        # ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                sheets_manager.log_reminder_action("CREATE", update.effective_user.id, username, chat_id, f"Created daily reminder: {reminder_text[:50]}...", new_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_data = {
                    "id": new_id,
                    "text": reminder_text,
                    "time": context.user_data["daily_time"],
                    "type": "daily",
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": get_moscow_time().strftime("%Y-%m-%d %H:%M:%S"),
                    "username": username
                }
                sheets_manager.sync_reminder(reminder_data, "CREATE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced daily reminder #{new_id} to Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error syncing daily reminder to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - daily reminder #{new_id} not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for daily reminder sync")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(context.dispatcher.job_queue, reminders[-1])
        
        try:
            update.message.reply_text(
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                f"üïê <i>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {context.user_data['daily_time']}</i>\n"
                f"üí¨ {reminder_text}", 
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {context.user_data['daily_time']}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in receive_daily_text: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_add_weekly_reminder(update: Update, context: CallbackContext):
    try:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üìÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n<i>‚è∞ –°–µ–π—á–∞—Å: {current_time}</i>", parse_mode=ParseMode.HTML)
        return WEEKLY_DAY
    except:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n‚è∞ –°–µ–π—á–∞—Å: {current_time}")
        return WEEKLY_DAY

def receive_weekly_day(update: Update, context: CallbackContext):
    # ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ None - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AttributeError
    if not update.message or not update.message.text:
        try:
            update.message.reply_text("‚ùå <b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç–æ–º:", parse_mode=ParseMode.HTML)
        except:
            if update.message:
                update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:")
        return WEEKLY_DAY
    
    text = update.message.text.strip().lower()
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    if text not in days:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
        return WEEKLY_DAY
    context.user_data["weekly_day"] = text
    try:
        update.message.reply_text("üïê <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:", parse_mode=ParseMode.HTML)
    except:
        update.message.reply_text("üïê –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    return WEEKLY_TIME

def receive_weekly_time(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        time.strptime(text, "%H:%M")
        context.user_data["weekly_time"] = text
        try:
            update.message.reply_text("‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏):\n<i>‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</i>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:\n‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)")
        return WEEKLY_TEXT
    except Exception:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):")
        return WEEKLY_TIME

def receive_weekly_text(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        new_id = get_next_reminder_id()
        reminder_text = update.message.text_html if update.message.text_html else update.message.text.strip()
        reminder_text = safe_html_escape(reminder_text)
        
        reminders.append({
            "id": new_id,
            "type": "weekly",
            "day": context.user_data["weekly_day"],
            "time": context.user_data["weekly_time"],
            "text": reminder_text
        })
        save_reminders(reminders)
        
        # ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                sheets_manager.log_reminder_action("CREATE", update.effective_user.id, username, chat_id, f"Created weekly reminder: {reminder_text[:50]}...", new_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_data = {
                    "id": new_id,
                    "text": reminder_text,
                    "time": f"{context.user_data['weekly_day']} {context.user_data['weekly_time']}",
                    "type": "weekly",
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": get_moscow_time().strftime("%Y-%m-%d %H:%M:%S"),
                    "username": username,
                    "days_of_week": context.user_data["weekly_day"]
                }
                sheets_manager.sync_reminder(reminder_data, "CREATE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced weekly reminder #{new_id} to Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error syncing weekly reminder to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - weekly reminder #{new_id} not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for weekly reminder sync")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(context.dispatcher.job_queue, reminders[-1])
        
        try:
            update.message.reply_text(
                f"‚úÖ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                f"üìÖ <i>–ö–∞–∂–¥—ã–π {context.user_data['weekly_day'].title()} –≤ {context.user_data['weekly_time']}</i>\n"
                f"üí¨ {reminder_text}", 
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {context.user_data['weekly_day'].title()} {context.user_data['weekly_time']}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in receive_weekly_text: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return ConversationHandler.END

# --- –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def list_reminders(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        if not reminders:
            try:
                update.message.reply_text("üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        lines = ["üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        reminders.sort(key=lambda x: int(x.get("id", "0")))
        
        for i, r in enumerate(reminders, 1):
            try:
                safe_text = safe_html_escape(r.get('text', ''))
                if r["type"] == "once":
                    lines.append(f"{i}. [üìÖ –†–∞–∑–æ–≤–æ] {r['datetime']}\nüí¨ {safe_text}\n")
                elif r["type"] == "daily":
                    lines.append(f"{i}. [üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ] {r['time']}\nüí¨ {safe_text}\n")
                elif r["type"] == "weekly":
                    lines.append(f"{i}. [üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ] {r['day'].title()} {r['time']}\nüí¨ {safe_text}\n")
            except Exception as e:
                logger.error(f"Error formatting reminder {i}: {e}")
                lines.append(f"{i}. [–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞]\n")
        
        message_text = "\n".join(lines)
        
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_chunk + line) > 4000:
                    chunks.append(current_chunk)
                    current_chunk = line
                else:
                    current_chunk += line
            
            if current_chunk:
                chunks.append(current_chunk)
            
            for chunk in chunks:
                try:
                    update.message.reply_text(chunk, parse_mode=ParseMode.HTML)
                except:
                    # Fallback –±–µ–∑ HTML
                    clean_chunk = chunk.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                    update.message.reply_text(clean_chunk)
        else:
            try:
                update.message.reply_text(message_text, parse_mode=ParseMode.HTML)
            except:
                # Fallback –±–µ–∑ HTML
                clean_text = message_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                update.message.reply_text(clean_text)
                
    except Exception as e:
        logger.error(f"Error in list_reminders: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

def list_polls(update: Update, context: CallbackContext):
    try:
        polls = load_polls()
        if not polls:
            try:
                update.message.reply_text("üó≥Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üó≥Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
            return
        
        lines = ["üó≥Ô∏è –í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        polls.sort(key=lambda x: int(x.get("id", "0")))
        
        for i, p in enumerate(polls, 1):
            try:
                safe_question = safe_html_escape(p.get('question', ''))
                options_preview = ", ".join(p.get('options', [])[:2])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                if len(p.get('options', [])) > 2:
                    options_preview += "..."
                
                if p["type"] == "once" or p["type"] == "one_time":
                    lines.append(f"{i}. [üìÖ –†–∞–∑–æ–≤–æ] {p['datetime']}\n‚ùì {safe_question}\nüîò {options_preview}\n")
                elif p["type"] == "daily" or p["type"] == "daily_poll":
                    lines.append(f"{i}. [üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ] {p['time']}\n‚ùì {safe_question}\nüîò {options_preview}\n")
                elif p["type"] == "weekly" or p["type"] == "weekly_poll":
                    day_str = str(p['day']).title() if p.get('day') else 'N/A'
                    lines.append(f"{i}. [üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ] {day_str} {p['time']}\n‚ùì {safe_question}\nüîò {options_preview}\n")
            except Exception as e:
                logger.error(f"Error formatting poll {i}: {e}")
                lines.append(f"{i}. [–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞]\n")
        
        message_text = "\n".join(lines)
        
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = "üó≥Ô∏è –í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"
            
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_chunk + line) > 4000:
                    chunks.append(current_chunk)
                    current_chunk = line
                else:
                    current_chunk += line
            
            if current_chunk:
                chunks.append(current_chunk)
            
            for chunk in chunks:
                try:
                    update.message.reply_text(chunk, parse_mode=ParseMode.HTML)
                except:
                    # Fallback –±–µ–∑ HTML
                    clean_chunk = chunk.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                    update.message.reply_text(clean_chunk)
        else:
            try:
                update.message.reply_text(message_text, parse_mode=ParseMode.HTML)
            except:
                # Fallback –±–µ–∑ HTML
                clean_text = message_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                update.message.reply_text(clean_text)
                
    except Exception as e:
        logger.error(f"Error in list_polls: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_delete_reminder(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        if not reminders:
            try:
                update.message.reply_text("üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return ConversationHandler.END
        
        lines = ["üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        reminders.sort(key=lambda x: int(x.get("id", "0")))
        
        for i, r in enumerate(reminders, 1):
            try:
                text_preview = r.get('text', '')[:50]
                if len(r.get('text', '')) > 50:
                    text_preview += '...'
                    
                if r["type"] == "once":
                    lines.append(f"{i}. [üìÖ –†–∞–∑–æ–≤–æ] {r['datetime']}\nüí¨ {text_preview}")
                elif r["type"] == "daily":
                    lines.append(f"{i}. [üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ] {r['time']}\nüí¨ {text_preview}")
                elif r["type"] == "weekly":
                    lines.append(f"{i}. [üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ] {r['day'].title()} {r['time']}\nüí¨ {text_preview}")
            except Exception as e:
                logger.error(f"Error formatting reminder for deletion {i}: {e}")
                lines.append(f"{i}. [–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞]")
        
        try:
            update.message.reply_text("\n\n".join(lines), parse_mode=ParseMode.HTML)
        except:
            # Fallback –±–µ–∑ HTML
            clean_text = "\n\n".join(lines).replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            update.message.reply_text(clean_text)
        
        return REM_DEL_ID
        
    except Exception as e:
        logger.error(f"Error in start_delete_reminder: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return ConversationHandler.END

def confirm_delete_reminder(update: Update, context: CallbackContext):
    try:
        reminder_number = int(update.message.text.strip())
        reminders = load_reminders()
        
        if reminder_number < 1 or reminder_number > len(reminders):
            try:
                update.message.reply_text("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ " + str(len(reminders)), parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(reminders)}")
            return REM_DEL_ID
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        reminders.sort(key=lambda x: int(x.get("id", "0")))
        reminder_to_delete = reminders[reminder_number - 1]
        
        # ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                sheets_manager.log_reminder_action("DELETE", update.effective_user.id, username, chat_id, f"Deleted reminder: {reminder_to_delete.get('text', '')[:50]}...", reminder_to_delete.get('id'))
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "Deleted"
                reminder_data = {
                    "id": reminder_to_delete.get('id'),
                    "text": reminder_to_delete.get('text', ''),
                    "time": reminder_to_delete.get('datetime') or reminder_to_delete.get('time', ''),
                    "type": reminder_to_delete.get('type', ''),
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": reminder_to_delete.get('created_at', ''),
                    "username": reminder_to_delete.get('username', username),
                    "last_sent": reminder_to_delete.get('last_sent', ''),
                    "days_of_week": reminder_to_delete.get('day', '') if reminder_to_delete.get('type') == 'weekly' else reminder_to_delete.get('days_of_week', '')
                }
                
                # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "DELETE" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "Deleted"
                sheets_manager.sync_reminder(reminder_data, "DELETE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced reminder #{reminder_to_delete.get('id')} deletion to Google Sheets (status: Deleted)")
                
            except Exception as e:
                logger.error(f"‚ùå Error syncing reminder deletion to Google Sheets: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - reminder #{reminder_to_delete.get('id')} deletion not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for reminder deletion sync")
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        all_reminders = load_reminders()
        new_list = [r for r in all_reminders if r["id"] != reminder_to_delete["id"]]
        save_reminders(new_list)
        
        try:
            update.message.reply_text(f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_number} —É–¥–∞–ª–µ–Ω–æ</b>\n<i>–°—Ç–∞—Ç—É—Å –≤ Google Sheets –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Deleted</i>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_number} —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reschedule_all_reminders(context.dispatcher.job_queue)
        
    except ValueError:
        try:
            update.message.reply_text("‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return REM_DEL_ID
    except Exception as e:
        logger.error(f"Error in confirm_delete_reminder: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    return ConversationHandler.END

# --- –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def clear_reminders(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        all_reminders = load_reminders()
        reminders_count = len(all_reminders)
        
        # ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS –ü–†–ò –ú–ê–°–°–û–í–û–ú –£–î–ê–õ–ï–ù–ò–ò
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized and all_reminders:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                try:
                    progress_message = update.message.reply_text(
                        f"üîÑ <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...</b>\n\n"
                        f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets –¥–ª—è {reminders_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    progress_message = update.message.reply_text(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ {reminders_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                sheets_manager.log_reminder_action("CLEAR_ALL", update.effective_user.id, username, chat_id, f"Started mass deletion of {reminders_count} reminders", "")
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "Deleted"
                # –î–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞—Ç—á–∏–Ω–≥ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
                synced_count = 0
                failed_count = 0
                batch_size = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —Ä–∞–∑
                batch_delay = 10.0  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                
                for i, reminder in enumerate(all_reminders):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                        if i > 0 and i % batch_size == 0:
                            logger.info(f"üì¶ Completed batch {i//batch_size}, waiting {batch_delay}s before next batch...")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                            try:
                                context.bot.edit_message_text(
                                    chat_id=progress_message.chat_id,
                                    message_id=progress_message.message_id,
                                    text=f"üîÑ <b>–ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...</b>\n\n"
                                         f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{reminders_count}\n"
                                         f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {synced_count}\n"
                                         f"‚ùå –û—à–∏–±–∫–∏: {failed_count}\n\n"
                                         f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {batch_delay}s...",
                                    parse_mode=ParseMode.HTML
                                )
                            except:
                                pass
                            
                            time.sleep(batch_delay)
                        
                        reminder_data = {
                            "id": reminder.get('id'),
                            "text": reminder.get('text', ''),
                            "time": reminder.get('datetime') or reminder.get('time', ''),
                            "type": reminder.get('type', ''),
                            "chat_id": chat_id,
                            "chat_name": chat_name,
                            "created_at": reminder.get('created_at', ''),
                            "username": reminder.get('username', username),
                            "last_sent": reminder.get('last_sent', ''),
                            "days_of_week": reminder.get('day', '') if reminder.get('type') == 'weekly' else reminder.get('days_of_week', '')
                        }
                        
                        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "DELETE" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "Deleted"
                        success = sheets_manager.sync_reminder(reminder_data, "DELETE")
                        if success:
                            synced_count += 1
                        else:
                            failed_count += 1
                            logger.warning(f"‚ö†Ô∏è Failed to sync reminder #{reminder.get('id')} deletion")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1-2 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 60 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É
                        if i < len(all_reminders) - 1:  # –ù–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                            # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                            base_delay = 1.0  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                            progressive_delay = (i % batch_size) * 0.2  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–∞—Ç—á–∞
                            total_delay = base_delay + progressive_delay
                            time.sleep(total_delay)
                            logger.debug(f"‚è±Ô∏è Waiting {total_delay:.1f}s before next sync operation ({i+2}/{len(all_reminders)})")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error syncing reminder #{reminder.get('id')} deletion: {e}")
                        failed_count += 1
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</b>\n\n"
                             f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {synced_count}/{reminders_count}\n"
                             f"‚ùå –û—à–∏–±–∫–∏: {failed_count}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                time.sleep(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 0.5 –¥–æ 2 —Å–µ–∫—É–Ω–¥
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 0)
                count_update_success = sheets_manager.update_reminders_count(chat_id)
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                sheets_manager.log_reminder_action("CLEAR_ALL_COMPLETE", update.effective_user.id, username, chat_id, f"Completed mass deletion. Synced: {synced_count}/{reminders_count}, Failed: {failed_count}", "")
                
                logger.info(f"üìä Mass deletion summary: {synced_count}/{reminders_count} reminders synced, {failed_count} failed")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"üîÑ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è...</b>\n\n"
                             f"‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω ({synced_count}/{reminders_count})"
                             f"\n{'‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' if not count_update_success else '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
                
            except Exception as e:
                logger.error(f"‚ùå Error syncing mass deletion to Google Sheets: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - mass deletion of {reminders_count} reminders not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        elif not all_reminders:
            logger.info("üì≠ No reminders to delete")
        else:
            logger.warning("üìµ Google Sheets not available for mass deletion sync")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        save_reminders([])
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        job_queue = context.dispatcher.job_queue
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name and job.name.startswith('reminder_'):
                job.schedule_removal()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if reminders_count > 0:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å progress_message, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                if 'progress_message' in locals():
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                    if 'synced_count' in locals() and 'failed_count' in locals():
                        if failed_count == 0:
                            final_text = f"üóë <b>–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({reminders_count})</b>\n<i>‚úÖ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Google Sheets –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Deleted</i>"
                        else:
                            final_text = f"üóë <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({reminders_count})</b>\n<i>‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count}/{reminders_count}\n‚ö†Ô∏è –û—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {failed_count}</i>"
                    else:
                        final_text = f"üóë <b>–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({reminders_count})</b>\n<i>‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=final_text,
                        parse_mode=ParseMode.HTML
                    )
                else:
                    update.message.reply_text(
                        f"üóë <b>–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({reminders_count})</b>\n"
                        f"<i>–°—Ç–∞—Ç—É—Å –≤ Google Sheets –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Deleted</i>", 
                        parse_mode=ParseMode.HTML
                    )
            except:
                update.message.reply_text(f"üóë –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({reminders_count})")
        else:
            try:
                update.message.reply_text("üì≠ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"Error in clear_reminders: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

# --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∏–∑ Google Sheets ---
def restore_reminders(update: Update, context: CallbackContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∏–∑ Google Sheets"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets
        if not SHEETS_AVAILABLE or not sheets_manager:
            try:
                update.message.reply_text(
                    "‚ùå <b>Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "üìµ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text("‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not sheets_manager.is_initialized:
            try:
                update.message.reply_text(
                    "‚ùå <b>Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                    "‚Ä¢ GOOGLE_SHEETS_ID\n"
                    "‚Ä¢ GOOGLE_SHEETS_CREDENTIALS",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            progress_message = update.message.reply_text(
                "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
                "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...\n"
                "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∏ —á–∞—Ç–æ–≤...",
                parse_mode=ParseMode.HTML
            )
        except:
            progress_message = update.message.reply_text("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if sheets_manager.is_initialized:
            try:
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="RESTORE_ALL_START",
                    user_id=str(user_id),
                    username=username,
                    chat_id=chat_id,
                    details="Manual restore reminders and chats command initiated",
                    reminder_id=""
                )
            except Exception as e:
                logger.error(f"Error logging restore start: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            context.bot.edit_message_text(
                chat_id=progress_message.chat_id,
                message_id=progress_message.message_id,
                text="üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
                     "üì± –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤...",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        chats_restored = False
        chats_count = 0
        chats_message = ""
        
        try:
            success_chats = sheets_manager.restore_subscribed_chats_file()
            if success_chats:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                try:
                    with open("subscribed_chats.json", "r") as f:
                        restored_chats = json.load(f)
                        chats_count = len(restored_chats)
                        chats_restored = True
                        chats_message = f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–∞—Ç–æ–≤: {chats_count}"
                        logger.info(f"‚úÖ Successfully restored {chats_count} chats for user {username}")
                except:
                    chats_message = "–ß–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)"
                    chats_restored = True
            else:
                chats_message = "–ß–∞—Ç—ã –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –≤ Google Sheets)"
                logger.warning(f"‚ö†Ô∏è Failed to restore chats for user {username}")
        except Exception as e:
            chats_message = f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤: {str(e)}"
            logger.error(f"‚ùå Error restoring chats for user {username}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            context.bot.edit_message_text(
                chat_id=progress_message.chat_id,
                message_id=progress_message.message_id,
                text="üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
                     "üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        success, message = sheets_manager.restore_reminders_from_sheets()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
        try:
            context.bot.edit_message_text(
                chat_id=progress_message.chat_id,
                message_id=progress_message.message_id,
                text="üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
                     "üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        polls_success, polls_message = sheets_manager.restore_polls_from_sheets()
        
        if success or polls_success:
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            if success:
                reschedule_all_reminders(context.dispatcher.job_queue)
            if polls_success:
                reschedule_all_polls(context.dispatcher.job_queue)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            try:
                restored_reminders = load_reminders()
                reminders_count = len(restored_reminders)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
                once_count = sum(1 for r in restored_reminders if r.get('type') == 'once')
                daily_count = sum(1 for r in restored_reminders if r.get('type') == 'daily')
                weekly_count = sum(1 for r in restored_reminders if r.get('type') == 'weekly')
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
                restored_polls = load_polls()
                polls_count = len(restored_polls)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
                polls_once_count = sum(1 for p in restored_polls if p.get('type') == 'once')
                polls_daily_count = sum(1 for p in restored_polls if p.get('type') == 'daily')
                polls_weekly_count = sum(1 for p in restored_polls if p.get('type') == 'weekly')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                final_message = (
                    f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    f"üìã <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_count}</b>\n"
                    f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {once_count}\n"
                    f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {daily_count}\n"
                    f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {weekly_count}\n\n"
                    f"üìä <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {polls_count}</b>\n"
                    f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {polls_once_count}\n"
                    f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {polls_daily_count}\n"
                    f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {polls_weekly_count}\n\n"
                    f"üì± <b>–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>\n"
                    f"{'‚úÖ ' + chats_message if chats_restored else '‚ö†Ô∏è ' + chats_message}\n\n"
                    f"‚è∞ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã!\n"
                    f"<i>–ö–æ–º–∞–Ω–¥—ã: /list_reminders, /list_polls –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>"
                )
                
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=final_message,
                        parse_mode=ParseMode.HTML
                    )
                except:
                    # Fallback –±–µ–∑ HTML
                    clean_message = (
                        f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        f"üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_count}\n"
                        f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {once_count}\n"
                        f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {daily_count}\n"
                        f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {weekly_count}\n\n"
                        f"üó≥Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {polls_count}\n"
                        f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {polls_once_count}\n"
                        f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {polls_daily_count}\n"
                        f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {polls_weekly_count}\n\n"
                        f"üì± –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:\n"
                        f"{chats_message}\n\n"
                        f"‚è∞ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã!\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_reminders –∏ /list_polls –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
                    )
                    update.message.reply_text(clean_message)
                
                logger.info(f"‚úÖ Successfully restored {reminders_count} reminders, {polls_count} polls and {chats_count if chats_restored else 0} chats for user {username} (ID: {user_id})")
                
            except Exception as e:
                logger.error(f"Error getting restored data count: {e}")
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                             f"üìã {message}\n"
                             f"üì± {chats_message}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    update.message.reply_text(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüìã {message}\nüì± {chats_message}")
        
        else:
            # –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            try:
                context.bot.edit_message_text(
                    chat_id=progress_message.chat_id,
                    message_id=progress_message.message_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                         f"üìã {message}\n\n"
                         f"üì± <b>–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>\n"
                         f"{'‚úÖ ' + chats_message if chats_restored else '‚ö†Ô∏è ' + chats_message}\n\n"
                         f"üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</i>\n"
                         f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Sheets\n"
                         f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –ª–∏—Å—Ç–∞—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
                         f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\nüìã {message}\nüì± {chats_message}")
            
            logger.error(f"‚ùå Failed to restore data for user {username}: {message}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if sheets_manager.is_initialized:
            try:
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="RESTORE_ALL_COMPLETE",
                    user_id=str(user_id),
                    username=username,
                    chat_id=chat_id,
                    details=f"Manual restore {'successful' if success else 'failed'}: Data: {message}, Chats: {chats_message}",
                    reminder_id=""
                )
            except Exception as e:
                logger.error(f"Error logging restore completion: {e}")
                
    except Exception as e:
        logger.error(f"Error in restore function: {e}")
        try:
            update.message.reply_text(
                "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.",
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

def restore_polls(update: Update, context: CallbackContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∏–∑ Google Sheets"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets
        if not SHEETS_AVAILABLE or not sheets_manager:
            try:
                update.message.reply_text(
                    "‚ùå <b>Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "üìµ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text("‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not sheets_manager.is_initialized:
            try:
                update.message.reply_text(
                    "‚ùå <b>Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                    "‚Ä¢ GOOGLE_SHEETS_ID\n"
                    "‚Ä¢ GOOGLE_SHEETS_CREDENTIALS",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            progress_message = update.message.reply_text(
                "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...</b>\n\n"
                "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...",
                parse_mode=ParseMode.HTML
            )
        except:
            progress_message = update.message.reply_text("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if sheets_manager.is_initialized:
            try:
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="RESTORE_POLLS_START",
                    user_id=str(user_id),
                    username=username,
                    chat_id=chat_id,
                    details="Manual restore polls command initiated",
                    reminder_id=""
                )
            except Exception as e:
                logger.error(f"Error logging restore polls start: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            context.bot.edit_message_text(
                chat_id=progress_message.chat_id,
                message_id=progress_message.message_id,
                text="üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...</b>\n\n"
                     "üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        polls_success, polls_message = sheets_manager.restore_polls_from_sheets()
        
        if polls_success:
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            reschedule_all_polls(context.dispatcher.job_queue)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
            try:
                restored_polls = load_polls()
                polls_count = len(restored_polls)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
                polls_once_count = sum(1 for p in restored_polls if p.get('type') == 'once')
                polls_daily_count = sum(1 for p in restored_polls if p.get('type') == 'daily')
                polls_weekly_count = sum(1 for p in restored_polls if p.get('type') == 'weekly')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                final_message = (
                    f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                    f"üìä <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {polls_count}</b>\n"
                    f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {polls_once_count}\n"
                    f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {polls_daily_count}\n"
                    f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {polls_weekly_count}\n\n"
                    f"‚è∞ –í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã!\n"
                    f"<i>–ö–æ–º–∞–Ω–¥–∞: /list_polls –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>"
                )
                
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=final_message,
                        parse_mode=ParseMode.HTML
                    )
                except:
                    # Fallback –±–µ–∑ HTML
                    clean_message = (
                        f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                        f"üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {polls_count}\n"
                        f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {polls_once_count}\n"
                        f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {polls_daily_count}\n"
                        f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {polls_weekly_count}\n\n"
                        f"‚è∞ –í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã!\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_polls –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
                    )
                    update.message.reply_text(clean_message)
                
                logger.info(f"‚úÖ Successfully restored {polls_count} polls for user {username} (ID: {user_id})")
                
            except Exception as e:
                logger.error(f"Error getting restored polls count: {e}")
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                             f"üìä {polls_message}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    update.message.reply_text(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüìä {polls_message}")
        
        else:
            # –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
            try:
                context.bot.edit_message_text(
                    chat_id=progress_message.chat_id,
                    message_id=progress_message.message_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π</b>\n\n"
                         f"üìä {polls_message}\n\n"
                         f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π\n\nüìä {polls_message}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if sheets_manager.is_initialized:
            try:
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="RESTORE_POLLS_COMPLETE",
                    user_id=str(user_id),
                    username=username,
                    chat_id=chat_id,
                    details=f"Restore polls completed: {polls_message}",
                    reminder_id=""
                )
            except Exception as e:
                logger.error(f"Error logging restore polls complete: {e}")
        
    except Exception as e:
        logger.error(f"Error in restore_polls: {e}")
        try:
            update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")

# --- –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
def next_notification(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        if not reminders:
            try:
                update.message.reply_text("üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        now_moscow = get_moscow_time()
        soonest = None
        soonest_time = None
        days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        for r in reminders:
            t = None
            if r["type"] == "once":
                try:
                    # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                    naive_dt = datetime.strptime(r["datetime"], "%Y-%m-%d %H:%M")
                    t = MOSCOW_TZ.localize(naive_dt)
                    if t < now_moscow:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        continue
                except ValueError:
                    continue
            elif r["type"] == "daily":
                try:
                    h, m = map(int, r["time"].split(":"))
                    candidate = now_moscow.replace(hour=h, minute=m, second=0, microsecond=0)
                    if candidate < now_moscow:
                        candidate += timedelta(days=1)
                    t = candidate
                except ValueError:
                    continue
            elif r["type"] == "weekly":
                try:
                    weekday = days.index(r["day"])
                    h, m = map(int, r["time"].split(":"))
                    candidate = now_moscow.replace(hour=h, minute=m, second=0, microsecond=0)
                    days_ahead = (weekday - now_moscow.weekday() + 7) % 7
                    if days_ahead == 0 and candidate < now_moscow:
                        days_ahead = 7
                    t = candidate + timedelta(days=days_ahead)
                except (ValueError, IndexError):
                    continue
            
            if t and (soonest_time is None or t < soonest_time):
                soonest_time = t
                soonest = r
        
        if soonest is None:
            try:
                update.message.reply_text("üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        time_diff = soonest_time - now_moscow
        
        if time_diff.days > 0:
            time_str = f"—á–µ—Ä–µ–∑ {time_diff.days} –¥–Ω."
        elif time_diff.seconds > 3600:
            hours = time_diff.seconds // 3600
            time_str = f"—á–µ—Ä–µ–∑ {hours} —á."
        elif time_diff.seconds > 60:
            minutes = time_diff.seconds // 60
            time_str = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."
        else:
            time_str = "–º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"
        
        safe_text = safe_html_escape(soonest.get('text', ''))
        current_time = now_moscow.strftime("%H:%M MSK")
        
        if soonest["type"] == "once":
            reminder_time = soonest_time.strftime("%Y-%m-%d %H:%M MSK")
            msg = f"üìÖ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\nüïê –†–∞–∑–æ–≤–æ: {reminder_time}\n‚è∞ {time_str}\nüí¨ {safe_text}\n\n<i>–°–µ–π—á–∞—Å: {current_time}</i>"
        elif soonest["type"] == "daily":
            reminder_time = soonest_time.strftime("%H:%M MSK")
            msg = f"üîÑ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\nüïê –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {reminder_time}\n‚è∞ {time_str}\nüí¨ {safe_text}\n\n<i>–°–µ–π—á–∞—Å: {current_time}</i>"
        elif soonest["type"] == "weekly":
            reminder_time = soonest_time.strftime("%H:%M MSK")
            msg = f"üìÜ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\nüïê –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: {soonest['day'].title()} {reminder_time}\n‚è∞ {time_str}\nüí¨ {safe_text}\n\n<i>–°–µ–π—á–∞—Å: {current_time}</i>"
        
        try:
            update.message.reply_text(msg, parse_mode=ParseMode.HTML)
        except:
            # Fallback –±–µ–∑ HTML
            clean_msg = msg.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            update.message.reply_text(clean_msg)
            
    except Exception as e:
        logger.error(f"Error in next_notification: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

def cancel_reminder(update: Update, context: CallbackContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    try:
        update.message.reply_text("‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode=ParseMode.HTML)
    except:
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# --- Poll management functions ---

def start_delete_poll(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    try:
        polls = load_polls()
        if not polls:
            try:
                update.message.reply_text("üì≠ <b>–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return ConversationHandler.END
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        polls.sort(key=lambda x: x.get('id', 0))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
        poll_list = []
        for poll in polls:
            poll_id = poll.get('id', 'N/A')
            question = poll.get('question', '–ë–µ–∑ –≤–æ–ø—Ä–æ—Å–∞')[:50]
            if len(poll.get('question', '')) > 50:
                question += '...'
            
            poll_type = poll.get('type', 'unknown')
            if poll_type == 'once':
                time_info = poll.get('datetime', 'N/A')
            elif poll_type == 'daily':
                time_info = f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {poll.get('time', 'N/A')}"
            elif poll_type == 'weekly':
                day_str = str(poll.get('day', 'N/A')).title() if poll.get('day') else 'N/A'
                time_info = f"{day_str} –≤ {poll.get('time', 'N/A')}"
            else:
                time_info = 'N/A'
            
            poll_list.append(f"#{poll_id}: {question} ({time_info})")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        message_parts = []
        current_part = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        
        for poll_info in poll_list:
            test_part = current_part + poll_info + "\n"
            if len(test_part) > 3500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è Telegram
                message_parts.append(current_part)
                current_part = poll_info + "\n"
            else:
                current_part = test_part
        
        if current_part.strip():
            message_parts.append(current_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        for i, part in enumerate(message_parts):
            if i == len(message_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                part += "\nüí° <i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</i>"
            
            try:
                update.message.reply_text(part, parse_mode=ParseMode.HTML)
            except:
                # Fallback –±–µ–∑ HTML
                clean_part = part.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                update.message.reply_text(clean_part)
        
        return POLL_DEL_ID
        
    except Exception as e:
        logger.error(f"Error in start_delete_poll: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
        return ConversationHandler.END

def confirm_delete_poll(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    try:
        poll_number = int(update.message.text.strip())
        
        polls = load_polls()
        poll_to_delete = None
        
        for poll in polls:
            if poll.get('id') == poll_number:
                poll_to_delete = poll
                break
        
        if not poll_to_delete:
            try:
                update.message.reply_text(f"‚ùå <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text(f"‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return POLL_DEL_ID
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        job_queue = context.dispatcher.job_queue
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name == f'poll_{poll_number}':
                job.schedule_removal()
                logger.info(f"üõë Stopped job for poll #{poll_number}")
        
        # ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                poll_data = {
                    "id": poll_to_delete.get('id'),
                    "question": poll_to_delete.get('question', ''),
                    "options": ', '.join(poll_to_delete.get('options', [])),
                    "time": poll_to_delete.get('datetime') or poll_to_delete.get('time', ''),
                    "type": poll_to_delete.get('type', ''),
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": poll_to_delete.get('created_at', ''),
                    "username": poll_to_delete.get('username', username),
                    "last_sent": poll_to_delete.get('last_sent', ''),
                    "days_of_week": poll_to_delete.get('day', '') if poll_to_delete.get('type') == 'weekly' else poll_to_delete.get('days_of_week', '')
                }
                
                # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "DELETE" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "Deleted"
                sheets_manager.sync_poll(poll_data, "DELETE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_polls_count(chat_id)
                
                logger.info(f"üìä Successfully synced poll #{poll_to_delete.get('id')} deletion to Google Sheets (status: Deleted)")
                
            except Exception as e:
                logger.error(f"‚ùå Error syncing poll deletion to Google Sheets: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - poll #{poll_to_delete.get('id')} deletion not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for poll deletion sync")
        
        # –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        all_polls = load_polls()
        new_list = [p for p in all_polls if p["id"] != poll_to_delete["id"]]
        save_polls(new_list)
        
        try:
            update.message.reply_text(f"‚úÖ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_number} —É–¥–∞–ª–µ–Ω–æ</b>\n<i>–°—Ç–∞—Ç—É—Å –≤ Google Sheets –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Deleted</i>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_number} —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        reschedule_all_polls(context.dispatcher.job_queue)
        
    except ValueError:
        try:
            update.message.reply_text("‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        return POLL_DEL_ID
    except Exception as e:
        logger.error(f"Error in confirm_delete_poll: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
    
    return ConversationHandler.END

def clear_polls(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        all_polls = load_polls()
        polls_count = len(all_polls)
        
        # ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS –ü–†–ò –ú–ê–°–°–û–í–û–ú –£–î–ê–õ–ï–ù–ò–ò
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized and all_polls:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                try:
                    progress_message = update.message.reply_text(
                        f"üîÑ <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...</b>\n\n"
                        f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets –¥–ª—è {polls_count} –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    progress_message = update.message.reply_text(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ {polls_count} –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                sheets_manager.log_poll_action("CLEAR_ALL", update.effective_user.id, username, chat_id, f"Started mass deletion of {polls_count} polls", "")
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "Deleted"
                synced_count = 0
                failed_count = 0
                batch_size = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞ —Ä–∞–∑
                batch_delay = 10.0  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                
                for i, poll in enumerate(all_polls):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                        if i > 0 and i % batch_size == 0:
                            logger.info(f"üì¶ Completed batch {i//batch_size}, waiting {batch_delay}s before next batch...")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                            try:
                                context.bot.edit_message_text(
                                    chat_id=progress_message.chat_id,
                                    message_id=progress_message.message_id,
                                    text=f"üîÑ <b>–ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...</b>\n\n"
                                         f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{polls_count}\n"
                                         f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {synced_count}\n"
                                         f"‚ùå –û—à–∏–±–∫–∏: {failed_count}\n\n"
                                         f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {batch_delay}s...",
                                    parse_mode=ParseMode.HTML
                                )
                            except:
                                pass
                            
                            time.sleep(batch_delay)
                        
                        poll_data = {
                            "id": poll.get('id'),
                            "question": poll.get('question', ''),
                            "options": ', '.join(poll.get('options', [])),
                            "time": poll.get('datetime') or poll.get('time', ''),
                            "type": poll.get('type', ''),
                            "chat_id": chat_id,
                            "chat_name": chat_name,
                            "created_at": poll.get('created_at', ''),
                            "username": poll.get('username', username),
                            "last_sent": poll.get('last_sent', ''),
                            "days_of_week": poll.get('day', '') if poll.get('type') == 'weekly' else poll.get('days_of_week', '')
                        }
                        
                        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "DELETE" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "Deleted"
                        success = sheets_manager.sync_poll(poll_data, "DELETE")
                        if success:
                            synced_count += 1
                        else:
                            failed_count += 1
                            logger.warning(f"‚ö†Ô∏è Failed to sync poll #{poll.get('id')} deletion")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
                        if i < len(all_polls) - 1:  # –ù–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                            base_delay = 1.0  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                            progressive_delay = (i % batch_size) * 0.2  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–∞—Ç—á–∞
                            total_delay = base_delay + progressive_delay
                            time.sleep(total_delay)
                            logger.debug(f"‚è±Ô∏è Waiting {total_delay:.1f}s before next sync operation ({i+2}/{len(all_polls)})")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error syncing poll #{poll.get('id')} deletion: {e}")
                        failed_count += 1
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</b>\n\n"
                             f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {synced_count}/{polls_count}\n"
                             f"‚ùå –û—à–∏–±–∫–∏: {failed_count}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                time.sleep(2.0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 0)
                count_update_success = sheets_manager.update_polls_count(chat_id)
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                sheets_manager.log_poll_action("CLEAR_ALL_COMPLETE", update.effective_user.id, username, chat_id, f"Completed mass deletion. Synced: {synced_count}/{polls_count}, Failed: {failed_count}", "")
                
                logger.info(f"üìä Mass deletion summary: {synced_count}/{polls_count} polls synced, {failed_count} failed")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"üîÑ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è...</b>\n\n"
                             f"‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω ({synced_count}/{polls_count})"
                             f"\n{'‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' if not count_update_success else '‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
                
            except Exception as e:
                logger.error(f"‚ùå Error syncing mass deletion to Google Sheets: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - mass deletion of {polls_count} polls not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        elif not all_polls:
            logger.info("üì≠ No polls to delete")
        else:
            logger.warning("üìµ Google Sheets not available for mass deletion sync")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        save_polls([])
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        job_queue = context.dispatcher.job_queue
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name and job.name.startswith('poll_'):
                job.schedule_removal()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if polls_count > 0:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å progress_message, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                if 'progress_message' in locals():
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                    if 'synced_count' in locals() and 'failed_count' in locals():
                        if failed_count == 0:
                            final_text = f"üóë <b>–í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({polls_count})</b>\n<i>‚úÖ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –≤ Google Sheets –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Deleted</i>"
                        else:
                            final_text = f"üóë <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({polls_count})</b>\n<i>‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count}/{polls_count}\n‚ö†Ô∏è –û—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {failed_count}</i>"
                    else:
                        final_text = f"üóë <b>–í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({polls_count})</b>\n<i>‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=final_text,
                        parse_mode=ParseMode.HTML
                    )
                else:
                    update.message.reply_text(
                        f"üóë <b>–í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({polls_count})</b>\n"
                        f"<i>–°—Ç–∞—Ç—É—Å –≤ Google Sheets –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Deleted</i>", 
                        parse_mode=ParseMode.HTML
                    )
            except:
                update.message.reply_text(f"üóë –í—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã ({polls_count})")
        else:
            try:
                update.message.reply_text("üì≠ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"Error in clear_polls: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")

def cancel_poll(update: Update, context: CallbackContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    try:
        update.message.reply_text("‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode=ParseMode.HTML)
    except:
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# --- Poll handlers ---

def start_add_one_poll(update: Update, context: CallbackContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    update.message.reply_text(
        "üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 15:30</code>\n\n"
        "‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–≤–µ",
        parse_mode=ParseMode.HTML
    )
    return POLL_DATE

def receive_poll_datetime(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    try:
        datetime_str = update.message.text.strip()
        poll_datetime = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
        moscow_tz = pytz.timezone('Europe/Moscow')
        poll_datetime = moscow_tz.localize(poll_datetime)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        now_moscow = datetime.now(moscow_tz)
        if poll_datetime <= now_moscow:
            update.message.reply_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode=ParseMode.HTML
            )
            return POLL_DATE
        
        context.user_data['poll_datetime'] = poll_datetime
        update.message.reply_text(
            "‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ—Å–º–æ—Ç—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è?</i>",
            parse_mode=ParseMode.HTML
        )
        return POLL_QUESTION
        
    except ValueError:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 15:30</code>",
            parse_mode=ParseMode.HTML
        )
        return POLL_DATE

def receive_poll_question(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    question = update.message.text.strip()
    if len(question) > 300:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: 300 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å.",
            parse_mode=ParseMode.HTML
        )
        return POLL_QUESTION
    
    context.user_data['poll_question'] = question
    update.message.reply_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
        "–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ú–∞–∫—Å–∏–º—É–º 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–í–∞—Ä–∏–∞–Ω—Ç 1\n"
        "–í–∞—Ä–∏–∞–Ω—Ç 2\n"
        "–í–∞—Ä–∏–∞–Ω—Ç 3</code>",
        parse_mode=ParseMode.HTML
    )
    return POLL_OPTIONS

def receive_poll_options(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.
    """
    options_text = update.message.text.strip()
    options = [opt.strip() for opt in options_text.split('\n') if opt.strip()]
    
    if len(options) < 2:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>\n\n"
            "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        return POLL_OPTIONS
    
    if len(options) > 12:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫.",
            parse_mode=ParseMode.HTML
        )
        return POLL_OPTIONS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for option in options:
        if len(option) > 100:
            update.message.reply_text(
                "‚ö†Ô∏è <b>–í–∞—Ä–∏–∞–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
                parse_mode=ParseMode.HTML
            )
            return POLL_OPTIONS
    
    try:
        polls = load_polls()
        poll_id = get_next_poll_id()
        
        new_poll = {
            "id": poll_id,
            "question": context.user_data['poll_question'],
            "options": options,
            "datetime": context.user_data['poll_datetime'].strftime("%Y-%m-%d %H:%M"),
            "type": "once",
            "chat_id": update.effective_chat.id,
            "chat_name": update.effective_chat.title or update.effective_user.first_name or "Unknown",
            "status": "Active",
            "created_at": get_moscow_time().strftime("%d.%m.%Y %H:%M:%S"),
            "username": update.effective_user.username or "Unknown",
            "last_sent": None,
            "days_of_week": None,
            "allow_multiple_answers": True
        }
        
        polls.append(new_poll)
        save_polls(polls)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        schedule_poll(context.job_queue, new_poll)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager:
            try:
                sheets_manager.log_poll_action(
                    action="CREATE",
                    user_id=update.effective_user.id,
                    username=update.effective_user.username or "Unknown",
                    chat_id=update.effective_chat.id,
                    details=f"One-time poll: {new_poll['question'][:50]}...",
                    poll_id=poll_id
                )
                sheets_manager.sync_poll(new_poll, 'CREATE')
            except Exception as e:
                logger.error(f"Failed to sync poll to sheets: {e}")
        
        moscow_time_str = context.user_data['poll_datetime'].strftime("%d.%m.%Y –≤ %H:%M")
        update.message.reply_text(
            f"‚úÖ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üìä <b>–í–æ–ø—Ä–æ—Å:</b> {safe_html_escape(new_poll['question'])}\n"
            f"üìù <b>–í–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b> {len(options)}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {moscow_time_str} (–ú–°–ö)\n"
            f"üÜî <b>ID:</b> {poll_id}",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error creating poll: {e}")
        update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    
    return ConversationHandler.END

def cancel_poll(update: Update, context: CallbackContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    try:
        update.message.reply_text("‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
    except:
        update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

def start_add_daily_poll(update: Update, context: CallbackContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    update.message.reply_text(
        "üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ß–ß:–ú–ú</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>18:30</code>\n\n"
        "‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–≤–µ",
        parse_mode=ParseMode.HTML
    )
    return DAILY_POLL_TIME

def receive_daily_poll_time(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    try:
        time_str = update.message.text.strip()
        poll_time = datetime.strptime(time_str, "%H:%M").time()
        
        context.user_data['daily_poll_time'] = poll_time
        update.message.reply_text(
            "‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ß—Ç–æ –±—É–¥–µ–º –µ—Å—Ç—å –Ω–∞ –æ–±–µ–¥?</i>",
            parse_mode=ParseMode.HTML
        )
        return DAILY_POLL_QUESTION
        
    except ValueError:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>18:30</code>",
            parse_mode=ParseMode.HTML
        )
        return DAILY_POLL_TIME

def receive_daily_poll_question(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    question = update.message.text.strip()
    if len(question) > 300:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: 300 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å.",
            parse_mode=ParseMode.HTML
        )
        return DAILY_POLL_QUESTION
    
    context.user_data['daily_poll_question'] = question
    update.message.reply_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
        "–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ú–∞–∫—Å–∏–º—É–º 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–í–∞—Ä–∏–∞–Ω—Ç 1\n"
        "–í–∞—Ä–∏–∞–Ω—Ç 2\n"
        "–í–∞—Ä–∏–∞–Ω—Ç 3</code>",
        parse_mode=ParseMode.HTML
    )
    return DAILY_POLL_OPTIONS

def receive_daily_poll_options(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.
    """
    options_text = update.message.text.strip()
    options = [opt.strip() for opt in options_text.split('\n') if opt.strip()]
    
    if len(options) < 2:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>\n\n"
            "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        return DAILY_POLL_OPTIONS
    
    if len(options) > 12:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫.",
            parse_mode=ParseMode.HTML
        )
        return DAILY_POLL_OPTIONS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for option in options:
        if len(option) > 100:
            update.message.reply_text(
                "‚ö†Ô∏è <b>–í–∞—Ä–∏–∞–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
                parse_mode=ParseMode.HTML
            )
            return DAILY_POLL_OPTIONS
    
    try:
        polls = load_polls()
        poll_id = get_next_poll_id()
        
        new_poll = {
            "id": poll_id,
            "question": context.user_data['daily_poll_question'],
            "options": options,
            "time": context.user_data['daily_poll_time'].strftime("%H:%M"),
            "type": "daily",
            "chat_id": update.effective_chat.id,
            "chat_name": update.effective_chat.title or update.effective_user.first_name or "Unknown",
            "status": "Active",
            "created_at": get_moscow_time().strftime("%d.%m.%Y %H:%M:%S"),
            "username": update.effective_user.username or "Unknown",
            "last_sent": None,
            "days_of_week": None,
            "allow_multiple_answers": True
        }
        
        polls.append(new_poll)
        save_polls(polls)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        schedule_poll(context.job_queue, new_poll)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager:
            try:
                sheets_manager.log_poll_action(
                    action="CREATE",
                    user_id=update.effective_user.id,
                    username=update.effective_user.username or "Unknown",
                    chat_id=update.effective_chat.id,
                    details=f"Daily poll: {new_poll['question'][:50]}...",
                    poll_id=poll_id
                )
                sheets_manager.sync_poll(new_poll, 'CREATE')
            except Exception as e:
                logger.error(f"Failed to sync poll to sheets: {e}")
        
        time_str = context.user_data['daily_poll_time'].strftime("%H:%M")
        update.message.reply_text(
            f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üìä <b>–í–æ–ø—Ä–æ—Å:</b> {safe_html_escape(new_poll['question'])}\n"
            f"üìù <b>–í–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b> {len(options)}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str} (–ú–°–ö)\n"
            f"üÜî <b>ID:</b> {poll_id}",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error creating daily poll: {e}")
        update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    
    return ConversationHandler.END

def start_add_weekly_poll(update: Update, context: CallbackContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    keyboard = [
        [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="poll_day_monday")],
        [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="poll_day_tuesday")],
        [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="poll_day_wednesday")],
        [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="poll_day_thursday")],
        [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="poll_day_friday")],
        [InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="poll_day_saturday")],
        [InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="poll_day_sunday")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return WEEKLY_POLL_DAY

def receive_weekly_poll_day(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    query = update.callback_query
    query.answer()
    
    day_mapping = {
        "poll_day_monday": (0, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
        "poll_day_tuesday": (1, "–í—Ç–æ—Ä–Ω–∏–∫"),
        "poll_day_wednesday": (2, "–°—Ä–µ–¥–∞"),
        "poll_day_thursday": (3, "–ß–µ—Ç–≤–µ—Ä–≥"),
        "poll_day_friday": (4, "–ü—è—Ç–Ω–∏—Ü–∞"),
        "poll_day_saturday": (5, "–°—É–±–±–æ—Ç–∞"),
        "poll_day_sunday": (6, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    }
    
    if query.data in day_mapping:
        day_num, day_name = day_mapping[query.data]
        context.user_data['weekly_poll_day'] = day_num
        context.user_data['weekly_poll_day_name'] = day_name
        
        query.edit_message_text(
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å:</b> {day_name}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ß–ß:–ú–ú</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>18:30</code>\n\n"
            "‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–≤–µ",
            parse_mode=ParseMode.HTML
        )
        return WEEKLY_POLL_TIME
    
    return WEEKLY_POLL_DAY

def receive_weekly_poll_time(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    try:
        time_str = update.message.text.strip()
        poll_time = datetime.strptime(time_str, "%H:%M").time()
        
        context.user_data['weekly_poll_time'] = poll_time
        update.message.reply_text(
            "‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?</i>",
            parse_mode=ParseMode.HTML
        )
        return WEEKLY_POLL_QUESTION
        
    except ValueError:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>18:30</code>",
            parse_mode=ParseMode.HTML
        )
        return WEEKLY_POLL_TIME

def receive_weekly_poll_question(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    question = update.message.text.strip()
    if len(question) > 300:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: 300 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å.",
            parse_mode=ParseMode.HTML
        )
        return WEEKLY_POLL_QUESTION
    
    context.user_data['weekly_poll_question'] = question
    update.message.reply_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</b>\n\n"
        "–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ú–∞–∫—Å–∏–º—É–º 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–í–∞—Ä–∏–∞–Ω—Ç 1\n"
        "–í–∞—Ä–∏–∞–Ω—Ç 2\n"
        "–í–∞—Ä–∏–∞–Ω—Ç 3</code>",
        parse_mode=ParseMode.HTML
    )
    return WEEKLY_POLL_OPTIONS

def receive_weekly_poll_options(update: Update, context: CallbackContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.
    """
    options_text = update.message.text.strip()
    options = [opt.strip() for opt in options_text.split('\n') if opt.strip()]
    
    if len(options) < 2:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>\n\n"
            "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        return WEEKLY_POLL_OPTIONS
    
    if len(options) > 12:
        update.message.reply_text(
            "‚ö†Ô∏è <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 12 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫.",
            parse_mode=ParseMode.HTML
        )
        return WEEKLY_POLL_OPTIONS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for option in options:
        if len(option) > 100:
            update.message.reply_text(
                "‚ö†Ô∏è <b>–í–∞—Ä–∏–∞–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
                parse_mode=ParseMode.HTML
            )
            return WEEKLY_POLL_OPTIONS
    
    try:
        polls = load_polls()
        poll_id = get_next_poll_id()
        
        new_poll = {
            "id": poll_id,
            "question": context.user_data['weekly_poll_question'],
            "options": options,
            "time": context.user_data['weekly_poll_time'].strftime("%H:%M"),
            "day": context.user_data['weekly_poll_day'],
            "type": "weekly",
            "chat_id": update.effective_chat.id,
            "chat_name": update.effective_chat.title or update.effective_user.first_name or "Unknown",
            "status": "Active",
            "created_at": get_moscow_time().strftime("%d.%m.%Y %H:%M:%S"),
            "username": update.effective_user.username or "Unknown",
            "last_sent": None,
            "days_of_week": [context.user_data['weekly_poll_day']],
            "allow_multiple_answers": True
        }
        
        polls.append(new_poll)
        save_polls(polls)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        schedule_poll(context.job_queue, new_poll)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager:
            try:
                sheets_manager.log_poll_action(
                    action="CREATE",
                    user_id=update.effective_user.id,
                    username=update.effective_user.username or "Unknown",
                    chat_id=update.effective_chat.id,
                    details=f"Weekly poll: {new_poll['question'][:50]}...",
                    poll_id=poll_id
                )
                sheets_manager.sync_poll(new_poll, 'CREATE')
            except Exception as e:
                logger.error(f"Failed to sync poll to sheets: {e}")
        
        day_name = context.user_data['weekly_poll_day_name']
        time_str = context.user_data['weekly_poll_time'].strftime("%H:%M")
        update.message.reply_text(
            f"‚úÖ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üìä <b>–í–æ–ø—Ä–æ—Å:</b> {safe_html_escape(new_poll['question'])}\n"
            f"üìù <b>–í–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b> {len(options)}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> –∫–∞–∂–¥—ã–π {day_name} –≤ {time_str} (–ú–°–ö)\n"
            f"üÜî <b>ID:</b> {poll_id}",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error creating weekly poll: {e}")
        update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    
    return ConversationHandler.END

# --- Scheduling helpers ---

def send_poll(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º.
    """
    # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø
    moscow_time_start = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S MSK")
    utc_time_start = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    
    logger.info(f"üéØ POLL EXECUTION STARTED at {moscow_time_start} ({utc_time_start})")
    logger.info(f"üìã Job context: {context.job.context if context.job else 'NO JOB CONTEXT'}")
    
    try:
        poll = context.job.context
        
        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê –ì–û–õ–û–°–û–í–ê–ù–ò–Ø
        if not poll:
            logger.error(f"‚ùå CRITICAL: No poll context found in job!")
            return
        
        poll_id = poll.get('id', 'UNKNOWN')
        poll_type = poll.get('type', 'UNKNOWN')
        poll_question = poll.get('question', 'NO QUESTION')[:50]
        
        logger.info(f"üìä Poll details: ID={poll_id}, Type={poll_type}, Question='{poll_question}...'")
        logger.info(f"üîß Full poll context: {poll}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
                if not chats or len(chats) == 0:
                    raise ValueError("Empty chats list")
        except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
            logger.warning(f"‚ö†Ô∏è Problem with subscribed_chats.json: {e}")
            logger.info("üîß Attempting emergency restore...")
            if ensure_subscribed_chats_file():
                try:
                    with open("subscribed_chats.json", "r") as f:
                        chats = json.load(f)
                    logger.info(f"‚úÖ Emergency restore successful, loaded {len(chats)} chats")
                except:
                    logger.error("‚ùå Emergency restore failed, no polls will be sent")
                    return
            else:
                logger.error("‚ùå Emergency restore failed, no polls will be sent")
                return
        
        # üÜï –û–ë–†–ê–ë–û–¢–ö–ê –°–õ–£–ß–ê–Ø "–ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ß–ê–¢–û–í"
        if not chats or len(chats) == 0:
            moscow_time = get_moscow_time().strftime("%H:%M MSK")
            utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            poll_id = poll.get('id', 'unknown')
            
            logger.warning(f"‚ö†Ô∏è No active chats available for poll #{poll_id}")
            logger.info(f"üìã Poll details: {poll.get('type')} - '{poll.get('question', '')[:50]}...'")
            
            # üìä –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.log_poll_sent(
                    poll_id=poll_id,
                    chat_id="NO_CHATS",
                    status="NO_RECIPIENTS",
                    error="No active chats available for delivery",
                    question_preview=poll.get('question', '')[:50] + "..." if len(poll.get('question', '')) > 50 else poll.get('question', '')
                )
                    logger.info(f"üìä Logged 'no recipients' status for poll #{poll_id}")
                except Exception as e:
                    logger.error(f"‚ùå Error logging 'no recipients' to Google Sheets: {e}")
            
            # üöÆ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –†–ê–ó–û–í–´–• –ì–û–õ–û–°–û–í–ê–ù–ò–ô –ë–ï–ó –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô
            if poll.get("type") == "once" or poll.get("type") == "one_time":
                moscow_sent_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                updated_poll = poll.copy()
                updated_poll['last_sent'] = moscow_sent_time
                updated_poll['delivery_status'] = "No recipients available - auto-deleted"
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                polls = load_polls()
                polls = [p for p in polls if p.get("id") != poll.get("id")]
                save_polls(polls)
                logger.info(f"üóëÔ∏è One-time poll #{poll_id} auto-deleted: no recipients available")
                
                # üìä –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –£–î–ê–õ–ï–ù–ò–ï –í GOOGLE SHEETS
                if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        sheets_manager.sync_poll(updated_poll, "UPDATE")
                        logger.info(f"üìä Updated poll #{poll_id} with 'no recipients' info")
                        
                        # –ó–∞—Ç–µ–º –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                        sheets_manager.sync_poll(updated_poll, "DELETE")
                        logger.info(f"üìä Marked poll #{poll_id} as 'Deleted' (no recipients)")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        sheets_manager.log_poll_action(
                            "ONCE_AUTO_DELETED", 
                            "SYSTEM", 
                            "NoRecipients", 
                            0, 
                            f"One-time poll auto-deleted: no active chats available for delivery",
                            poll_id
                        )
                        logger.info(f"‚úÖ One-time poll #{poll_id} marked as completed: no recipients")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error syncing 'no recipients' deletion to Google Sheets: {e}")
                        
                else:
                    logger.warning(f"üìµ Google Sheets not available - poll #{poll_id} removed locally only")
                
                logger.info(f"‚úÖ One-time poll #{poll_id} processing completed: no recipients available")
                    
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"üìÖ Recurring poll #{poll_id} ({poll.get('type')}) - will retry on next schedule")
                
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        poll_id = poll.get('id', 'unknown')
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_manager.log_poll_sent(
                    poll_id=poll_id,
                    chat_id="ALL",
                    status="SENDING",
                    error="",
                    question_preview=poll.get('question', '')[:50] + "..." if len(poll.get('question', '')) > 50 else poll.get('question', '')
                )
                logger.info(f"üìä Logged poll sending start for #{poll_id} in Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error logging send start to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - poll #{poll_id} sending start not logged")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
        total_sent = 0
        total_failed = 0
        blocked_chats = []  # üÜï –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        for cid in chats[:]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–∑ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            delivery_status = "SUCCESS"
            error_details = ""
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                poll_message = context.bot.send_poll(
                    chat_id=cid,
                    question=poll.get('question', ''),
                    options=poll.get('options', []),
                    is_anonymous=False,  # –ù–µ–∞–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    allows_multiple_answers=poll.get('allow_multiple_answers', True)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                
                # –ö–Ω–æ–ø–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" —É–±—Ä–∞–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                logger.info(f"‚úÖ Poll sent to chat {cid} at {moscow_time}")
                total_sent += 1
                
            except Exception as e:
                error_str = str(e)
                logger.error(f"‚ùå Failed to send poll to chat {cid}: {e}")
                error_details = error_str
                delivery_status = "FAILED"
                
                # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ë–õ–û–ö–ò–†–û–í–ö–£ –ë–û–¢–ê
                if "Forbidden: bot was blocked by the user" in error_str or \
                   "Forbidden: user is deactivated" in error_str or \
                   "Forbidden: the group chat was deleted" in error_str or \
                   "Bad Request: chat not found" in error_str:
                    
                    logger.warning(f"üö´ Chat {cid} blocked bot or deleted - adding to removal list")
                    blocked_chats.append(cid)
                    delivery_status = "BLOCKED_AUTO_REMOVE"
                    error_details = f"Auto-removed due to: {error_str}"
                    total_failed += 1
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º fallback –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                
                total_failed += 1
                
            # üìä –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.log_poll_sent(
                        poll_id=poll_id,
                        chat_id=str(cid),
                        status=delivery_status,
                        error=error_details,
                        question_preview=poll.get('question', '')[:50] + "..." if len(poll.get('question', '')) > 50 else poll.get('question', '')
                    )
                except Exception as e:
                    logger.error(f"‚ùå Error logging poll delivery to Google Sheets: {e}")
        
        # üöÆ –£–î–ê–õ–Ø–ï–ú –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ß–ê–¢–´
        if blocked_chats:
            logger.info(f"üßπ Removing {len(blocked_chats)} blocked/deleted chats from subscription list")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            updated_chats = [cid for cid in chats if cid not in blocked_chats]
            save_chats(updated_chats)
            
            # üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.sync_subscribed_chats_to_sheets()
                    logger.info(f"üìä Synced blocked chats removal to Google Sheets")
                except Exception as e:
                    logger.error(f"‚ùå Error syncing blocked chats removal: {e}")
            
            for blocked_chat in blocked_chats:
                logger.info(f"üö´ Removed blocked chat {blocked_chat} from subscription list")
        
        # üìä –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–°–õ–ï–î–ù–ï–ô –û–¢–ü–†–ê–í–ö–ï
        moscow_sent_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        updated_poll = poll.copy()
        updated_poll['last_sent'] = moscow_sent_time
        updated_poll['delivery_status'] = f"Sent to {total_sent} chats, {total_failed} failed"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        polls = load_polls()
        for i, p in enumerate(polls):
            if p.get('id') == poll.get('id'):
                polls[i] = updated_poll
                break
        save_polls(polls)
        
        # üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_manager.sync_poll(updated_poll, "UPDATE")
                logger.info(f"üìä Updated poll #{poll_id} delivery info in Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error updating poll delivery info in Google Sheets: {e}")
        
        # üóëÔ∏è –£–î–ê–õ–Ø–ï–ú –†–ê–ó–û–í–´–ï –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ü–û–°–õ–ï –û–¢–ü–†–ê–í–ö–ò
        if poll.get("type") == "once" or poll.get("type") == "one_time":
            polls = load_polls()
            polls = [p for p in polls if p.get("id") != poll.get("id")]
            save_polls(polls)
            logger.info(f"üóëÔ∏è One-time poll #{poll_id} removed after sending")
            
            # üìä –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.sync_poll(updated_poll, "DELETE")
                    sheets_manager.log_poll_action(
                        "ONCE_COMPLETED", 
                        "SYSTEM", 
                        "AutoDelete", 
                        0, 
                        f"One-time poll completed and auto-deleted after sending to {total_sent} chats",
                        poll_id
                    )
                    logger.info(f"üìä Marked one-time poll #{poll_id} as completed in Google Sheets")
                except Exception as e:
                    logger.error(f"‚ùå Error marking one-time poll as completed in Google Sheets: {e}")
        
        logger.info(f"‚úÖ Poll #{poll_id} sent to {total_sent} chats, {total_failed} failed at {moscow_time}")
        
    except Exception as e:
        logger.error(f"‚ùå Critical error in send_poll: {e}")
        poll_id = context.job.context.get('id', 'unknown') if context.job.context else 'unknown'
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                moscow_time = get_moscow_time().strftime("%H:%M MSK")
                sheets_manager.log_poll_sent(
                    poll_id=poll_id,
                    chat_id="ERROR",
                    status="CRITICAL_ERROR",
                    error=str(e),
                    question_preview="Critical error occurred"
                )
                logger.info(f"üìä Logged critical poll error to Google Sheets")
            except Exception as sheet_error:
                logger.error(f"‚ùå Error logging critical poll error to Google Sheets: {sheet_error}")


def send_reminder(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º.
    """
    try:
        reminder = context.job.context
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
                if not chats or len(chats) == 0:
                    raise ValueError("Empty chats list")
        except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
            logger.warning(f"‚ö†Ô∏è Problem with subscribed_chats.json: {e}")
            logger.info("üîß Attempting emergency restore...")
            if ensure_subscribed_chats_file():
                try:
                    with open("subscribed_chats.json", "r") as f:
                        chats = json.load(f)
                    logger.info(f"‚úÖ Emergency restore successful, loaded {len(chats)} chats")
                except:
                    logger.error("‚ùå Emergency restore failed, no reminders will be sent")
                    return
            else:
                logger.error("‚ùå Emergency restore failed, no reminders will be sent")
                return
        
        # üÜï –û–ë–†–ê–ë–û–¢–ö–ê –°–õ–£–ß–ê–Ø "–ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ß–ê–¢–û–í"
        if not chats or len(chats) == 0:
            moscow_time = get_moscow_time().strftime("%H:%M MSK")
            utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            reminder_id = reminder.get('id', 'unknown')
            
            logger.warning(f"‚ö†Ô∏è No active chats available for reminder #{reminder_id}")
            logger.info(f"üìã Reminder details: {reminder.get('type')} - '{reminder.get('text', '')[:50]}...'")
            
            # üìä –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.log_send_history(
                        utc_time=utc_time,
                        moscow_time=moscow_time,
                        reminder_id=reminder_id,
                        chat_id="NO_CHATS",
                        status="NO_RECIPIENTS",
                        error="No active chats available for delivery",
                        text_preview=reminder.get('text', '')[:50] + "..." if len(reminder.get('text', '')) > 50 else reminder.get('text', '')
                    )
                    logger.info(f"üìä Logged 'no recipients' status for reminder #{reminder_id}")
                except Exception as e:
                    logger.error(f"‚ùå Error logging 'no recipients' to Google Sheets: {e}")
            
            # üöÆ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –†–ê–ó–û–í–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ë–ï–ó –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô
            if reminder.get("type") == "once":
                moscow_sent_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                updated_reminder = reminder.copy()
                updated_reminder['last_sent'] = moscow_sent_time
                updated_reminder['delivery_status'] = "No recipients available - auto-deleted"
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                reminders = load_reminders()
                reminders = [r for r in reminders if r.get("id") != reminder.get("id")]
                save_reminders(reminders)
                logger.info(f"üóëÔ∏è One-time reminder #{reminder_id} auto-deleted: no recipients available")
                
                # üìä –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –£–î–ê–õ–ï–ù–ò–ï –í GOOGLE SHEETS
                if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        sheets_manager.sync_reminder(updated_reminder, "UPDATE")
                        logger.info(f"üìä Updated reminder #{reminder_id} with 'no recipients' info")
                        
                        # –ó–∞—Ç–µ–º –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                        sheets_manager.sync_reminder(updated_reminder, "DELETE")
                        logger.info(f"üìä Marked reminder #{reminder_id} as 'Deleted' (no recipients)")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        sheets_manager.log_reminder_action(
                            "ONCE_AUTO_DELETED", 
                            "SYSTEM", 
                            "NoRecipients", 
                            0, 
                            f"One-time reminder auto-deleted: no active chats available for delivery",
                            reminder_id
                        )
                        logger.info(f"‚úÖ One-time reminder #{reminder_id} marked as completed: no recipients")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error syncing 'no recipients' deletion to Google Sheets: {e}")
                        
                else:
                    logger.warning(f"üìµ Google Sheets not available - reminder #{reminder_id} removed locally only")
                
                logger.info(f"‚úÖ One-time reminder #{reminder_id} processing completed: no recipients available")
                    
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"üìÖ Recurring reminder #{reminder_id} ({reminder.get('type')}) - will retry on next schedule")
                
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        reminder_text = f"üîî <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b> <i>({moscow_time})</i>\n\n{reminder.get('text', '')}"
        reminder_id = reminder.get('id', 'unknown')
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_manager.log_send_history(
                    utc_time=utc_time,
                    moscow_time=moscow_time,
                    reminder_id=reminder_id,
                    chat_id="ALL",
                    status="SENDING",
                    error="",
                    text_preview=reminder.get('text', '')[:50] + "..." if len(reminder.get('text', '')) > 50 else reminder.get('text', '')
                )
                logger.info(f"üìä Logged reminder sending start for #{reminder_id} in Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error logging send start to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - reminder #{reminder_id} sending start not logged")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
        total_sent = 0
        total_failed = 0
        blocked_chats = []  # üÜï –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        for cid in chats[:]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–∑ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            delivery_status = "SUCCESS"
            error_details = ""
            
            try:
                # üÜï –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è INLINE –∫–Ω–æ–ø–∫–∏
                try:
                    chat_info = context.bot.get_chat(cid)
                    is_private_chat = chat_info.type == 'private'
                except:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ª–∏—á–∫–∞ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                    is_private_chat = True
                
                # üÜï –°–æ–∑–¥–∞–µ–º INLINE –∫–Ω–æ–ø–∫—É "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
                reply_markup = None
                if is_private_chat:
                    keyboard = [[InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞", callback_data="unsubscribe")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                
                context.bot.send_message(
                    chat_id=cid, 
                    text=reminder_text, 
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                logger.info(f"‚úÖ Reminder sent to chat {cid} at {moscow_time}")
                total_sent += 1
                
            except Exception as e:
                error_str = str(e)
                logger.error(f"‚ùå Failed to send reminder to chat {cid}: {e}")
                error_details = error_str
                delivery_status = "FAILED"
                
                # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ë–õ–û–ö–ò–†–û–í–ö–£ –ë–û–¢–ê
                if "Forbidden: bot was blocked by the user" in error_str or \
                   "Forbidden: user is deactivated" in error_str or \
                   "Forbidden: the group chat was deleted" in error_str or \
                   "Bad Request: chat not found" in error_str:
                    
                    logger.warning(f"üö´ Chat {cid} blocked bot or deleted - adding to removal list")
                    blocked_chats.append(cid)
                    delivery_status = "BLOCKED_AUTO_REMOVE"
                    error_details = f"Auto-removed due to: {error_str}"
                    total_failed += 1
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º fallback –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                
                # Fallback –±–µ–∑ HTML –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
                try:
                    clean_text = reminder_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è fallback
                    try:
                        chat_info = context.bot.get_chat(cid)
                        is_private_chat = chat_info.type == 'private'
                    except:
                        is_private_chat = True
                    
                    # –°–æ–∑–¥–∞–µ–º INLINE –∫–Ω–æ–ø–∫—É –¥–ª—è fallback
                    reply_markup = None
                    if is_private_chat:
                        keyboard = [[InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞", callback_data="unsubscribe")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    context.bot.send_message(
                        chat_id=cid, 
                        text=clean_text,
                        reply_markup=reply_markup
                    )
                    logger.info(f"‚úÖ Fallback reminder sent to chat {cid} at {moscow_time}")
                    delivery_status = "SUCCESS_FALLBACK"
                    error_details = f"HTML failed: {str(e)}, sent as plain text"
                    total_sent += 1
                    
                except Exception as e2:
                    error_str2 = str(e2)
                    
                    # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ë–õ–û–ö–ò–†–û–í–ö–£ –ò –í FALLBACK
                    if "Forbidden: bot was blocked by the user" in error_str2 or \
                       "Forbidden: user is deactivated" in error_str2 or \
                       "Forbidden: the group chat was deleted" in error_str2 or \
                       "Bad Request: chat not found" in error_str2:
                        
                        logger.warning(f"üö´ Chat {cid} blocked bot (fallback) - adding to removal list")
                        blocked_chats.append(cid)
                        delivery_status = "BLOCKED_AUTO_REMOVE"
                        error_details = f"Auto-removed due to: {error_str2}"
                    else:
                        logger.error(f"‚ùå Failed to send fallback reminder to chat {cid}: {e2}")
                        error_details = f"HTML failed: {str(e)}, Plain text failed: {str(e2)}"
                    
                    total_failed += 1
            
            # üìä –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.log_send_history(
                        utc_time=utc_time,
                        moscow_time=moscow_time,
                        reminder_id=reminder_id,
                        chat_id=str(cid),
                        status=delivery_status,
                        error=error_details,
                        text_preview=reminder.get('text', '')[:50] + "..." if len(reminder.get('text', '')) > 50 else reminder.get('text', '')
                    )
                except Exception as e:
                    logger.error(f"‚ùå Error logging send to Google Sheets for chat {cid}: {e}")
        
        # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• –ß–ê–¢–û–í
        if blocked_chats:
            logger.info(f"üö´ Processing {len(blocked_chats)} blocked chats for auto-removal")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            updated_chats = [cid for cid in chats if cid not in blocked_chats]
            save_chats(updated_chats)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            for blocked_chat_id in blocked_chats:
                try:
                    success, result = unsubscribe_user(blocked_chat_id, "BlockedUser", "AUTO_BLOCKED")
                    if success:
                        logger.info(f"‚úÖ Auto-removed blocked chat {blocked_chat_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Could not auto-remove blocked chat {blocked_chat_id}: {result}")
                except Exception as e:
                    logger.error(f"‚ùå Error auto-removing blocked chat {blocked_chat_id}: {e}")
            
            logger.info(f"üßπ Auto-removal completed: {len(blocked_chats)} blocked chats removed")
        
        # üìä –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥ –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                final_status = "COMPLETED" if total_failed == 0 else f"PARTIAL ({total_sent}/{total_sent + total_failed})"
                if blocked_chats:
                    final_status += f", REMOVED {len(blocked_chats)} BLOCKED"
                
                sheets_manager.log_send_history(
                    utc_time=utc_time,
                    moscow_time=moscow_time,
                    reminder_id=reminder_id,
                    chat_id="SUMMARY",
                    status=final_status,
                    error=f"Sent: {total_sent}, Failed: {total_failed}, Blocked: {len(blocked_chats)}",
                    text_preview=f"Total chats: {len(chats)}"
                )
                logger.info(f"üìä Logged final summary for reminder #{reminder_id}: {total_sent} sent, {total_failed} failed, {len(blocked_chats)} auto-removed")
            except Exception as e:
                logger.error(f"‚ùå Error logging final summary to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - final summary for reminder #{reminder_id} not logged")
        
        logger.info(f"üìà Reminder #{reminder_id} delivery summary: {total_sent} sent, {total_failed} failed, {len(blocked_chats)} auto-removed")
        
        # üÜï –£–õ–£–ß–®–ï–ù–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –†–ê–ó–û–í–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ü–û–°–õ–ï –û–¢–ü–†–ê–í–ö–ò
        if reminder.get("type") == "once":
            moscow_sent_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            updated_reminder = reminder.copy()
            updated_reminder['last_sent'] = moscow_sent_time
            updated_reminder['delivery_status'] = f"Sent to {total_sent} chats, failed to {total_failed} chats, removed {len(blocked_chats)} blocked"
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            reminders = load_reminders()
            reminders = [r for r in reminders if r.get("id") != reminder.get("id")]
            save_reminders(reminders)
            logger.info(f"üóëÔ∏è One-time reminder #{reminder_id} removed from local storage after successful delivery")
            
            # üìä –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –£–î–ê–õ–ï–ù–ò–ï –í GOOGLE SHEETS
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    sheets_manager.sync_reminder(updated_reminder, "UPDATE")
                    logger.info(f"üìä Updated last_sent info for reminder #{reminder_id} in Google Sheets")
                    
                    # –ó–∞—Ç–µ–º –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                    sheets_manager.sync_reminder(updated_reminder, "DELETE")
                    logger.info(f"üìä Successfully marked reminder #{reminder_id} as 'Deleted' in Google Sheets")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    sheets_manager.log_reminder_action(
                        "ONCE_COMPLETED", 
                        "SYSTEM", 
                        "AutoDelete", 
                        0, 
                        f"One-time reminder completed and auto-deleted. Sent: {total_sent}, Failed: {total_failed}, Blocked: {len(blocked_chats)}",
                        reminder_id
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå Error syncing one-time reminder #{reminder_id} deletion to Google Sheets: {e}")
                    # –î–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                    
            elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
                logger.warning(f"üìµ Google Sheets not initialized - reminder #{reminder_id} deletion not synced")
                logger.warning("   One-time reminder removed locally but Google Sheets status not updated")
            else:
                logger.warning(f"üìµ Google Sheets not available - reminder #{reminder_id} removed locally only")
            
            logger.info(f"‚úÖ One-time reminder #{reminder_id} processing completed: delivered and removed")
        
    except Exception as e:
        logger.error(f"‚ùå Critical error in send_reminder: {e}")
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                moscow_time = get_moscow_time().strftime("%H:%M MSK")
                sheets_manager.log_send_history(
                    utc_time=utc_time,
                    moscow_time=moscow_time,
                    reminder_id=reminder.get('id', 'unknown') if 'reminder' in locals() else 'unknown',
                    chat_id="ERROR",
                    status="CRITICAL_ERROR",
                    error=str(e),
                    text_preview="Critical error in send_reminder function"
                )
            except:
                pass  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

def schedule_reminder(job_queue, reminder):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ JobQueue –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ ID, –µ—Å–ª–∏ –µ—Å—Ç—å
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name == f"reminder_{reminder.get('id')}":
                job.schedule_removal()
        
        if reminder["type"] == "once":
            # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            moscow_dt = datetime.strptime(reminder["datetime"], "%Y-%m-%d %H:%M")
            moscow_dt = MOSCOW_TZ.localize(moscow_dt)
            utc_dt = moscow_dt.astimezone(pytz.UTC).replace(tzinfo=None)
            
            if moscow_dt > get_moscow_time():  # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                job_queue.run_once(send_reminder, utc_dt, context=reminder, name=f"reminder_{reminder.get('id')}")
                logger.info(f"Scheduled one-time reminder {reminder.get('id')} for {moscow_dt.strftime('%Y-%m-%d %H:%M MSK')}")
                
        elif reminder["type"] == "daily":
            h, m = map(int, reminder["time"].split(":"))
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            moscow_time = dt_time(hour=h, minute=m)
            # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏–µ UTC
            utc_hour = (h - 3) % 24  # MSK = UTC+3
            utc_time = dt_time(hour=utc_hour, minute=m)
            
            job_queue.run_daily(send_reminder, utc_time, context=reminder, name=f"reminder_{reminder.get('id')}")
            logger.info(f"Scheduled daily reminder {reminder.get('id')} for {h:02d}:{m:02d} MSK (UTC: {utc_hour:02d}:{m:02d})")
            
        elif reminder["type"] == "weekly":
            days_map = {
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2,
                "—á–µ—Ç–≤–µ—Ä–≥": 3, "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
            }
            weekday = days_map[reminder["day"].lower()]
            h, m = map(int, reminder["time"].split(":"))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC
            utc_hour = (h - 3) % 24  # MSK = UTC+3
            utc_time = dt_time(hour=utc_hour, minute=m)
            
            job_queue.run_daily(
                send_reminder,
                utc_time,
                context=reminder,
                days=(weekday,),
                name=f"reminder_{reminder.get('id')}"
            )
            logger.info(f"Scheduled weekly reminder {reminder.get('id')} for {reminder['day']} {h:02d}:{m:02d} MSK")
            
    except Exception as e:
        logger.error(f"Error scheduling reminder {reminder.get('id', 'unknown')}: {e}")

def schedule_poll(job_queue, poll):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ JobQueue –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    try:
        poll_id = poll.get('id', 'unknown')
        poll_type = poll.get('type', 'unknown')
        logger.info(f"üîÑ Attempting to schedule poll #{poll_id} (type: {poll_type})")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ ID, –µ—Å–ª–∏ –µ—Å—Ç—å
        current_jobs = job_queue.jobs()
        removed_jobs = 0
        for job in current_jobs:
            if hasattr(job, 'name') and job.name == f"poll_{poll_id}":
                job.schedule_removal()
                removed_jobs += 1
        
        if removed_jobs > 0:
            logger.info(f"üóëÔ∏è Removed {removed_jobs} existing job(s) for poll #{poll_id}")
        
        if poll["type"] == "once" or poll["type"] == "one_time":
            # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            datetime_str = poll.get("datetime", "")
            logger.info(f"üìÖ Processing one-time poll #{poll_id} with datetime: {datetime_str}")
            
            moscow_dt = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
            moscow_dt = MOSCOW_TZ.localize(moscow_dt)
            utc_dt = moscow_dt.astimezone(pytz.UTC).replace(tzinfo=None)
            
            current_moscow_time = get_moscow_time()
            time_diff = (moscow_dt - current_moscow_time).total_seconds()
            
            logger.info(f"‚è∞ Poll #{poll_id} scheduled for: {moscow_dt.strftime('%Y-%m-%d %H:%M MSK')}")
            logger.info(f"‚è∞ Current Moscow time: {current_moscow_time.strftime('%Y-%m-%d %H:%M MSK')}")
            logger.info(f"‚è∞ Time difference: {time_diff:.0f} seconds ({time_diff/60:.1f} minutes)")
            
            if moscow_dt > current_moscow_time:  # –ü–ª–∞–Ω–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                job_queue.run_once(send_poll, utc_dt, context=poll, name=f"poll_{poll_id}")
                logger.info(f"‚úÖ Scheduled one-time poll #{poll_id} for {moscow_dt.strftime('%Y-%m-%d %H:%M MSK')}")
            elif moscow_dt <= current_moscow_time and time_diff >= -3600:  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                logger.warning(f"‚ö†Ô∏è Missed poll #{poll_id} scheduled for {moscow_dt.strftime('%Y-%m-%d %H:%M MSK')}, sending immediately")
                job_queue.run_once(send_poll, datetime.utcnow() + timedelta(seconds=5), context=poll, name=f"poll_{poll_id}_missed")
            else:
                logger.warning(f"‚ùå Skipping old poll #{poll_id} scheduled for {moscow_dt.strftime('%Y-%m-%d %H:%M MSK')} (too old: {-time_diff/3600:.1f} hours ago)")
                
        elif poll["type"] == "daily" or poll["type"] == "daily_poll":
            time_str = poll.get("time", "")
            logger.info(f"üìÖ Processing daily poll #{poll_id} with time: {time_str}")
            
            h, m = map(int, time_str.split(":"))
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            moscow_time = dt_time(hour=h, minute=m)
            # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏–µ UTC
            utc_hour = (h - 3) % 24  # MSK = UTC+3
            utc_time = dt_time(hour=utc_hour, minute=m)
            
            job_queue.run_daily(send_poll, utc_time, context=poll, name=f"poll_{poll_id}")
            logger.info(f"‚úÖ Scheduled daily poll #{poll_id} for {h:02d}:{m:02d} MSK (UTC: {utc_hour:02d}:{m:02d})")
            
        elif poll["type"] == "weekly" or poll["type"] == "weekly_poll":
            days_map = {
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2,
                "—á–µ—Ç–≤–µ—Ä–≥": 3, "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
            }
            day_str = poll.get("day", "")
            time_str = poll.get("time", "")
            logger.info(f"üìÖ Processing weekly poll #{poll_id} for {day_str} at {time_str}")
            
            weekday = days_map[day_str.lower()]
            h, m = map(int, time_str.split(":"))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC
            utc_hour = (h - 3) % 24  # MSK = UTC+3
            utc_time = dt_time(hour=utc_hour, minute=m)
            
            job_queue.run_daily(
                send_poll,
                utc_time,
                context=poll,
                days=(weekday,),
                name=f"poll_{poll_id}"
            )
            logger.info(f"‚úÖ Scheduled weekly poll #{poll_id} for {day_str} {h:02d}:{m:02d} MSK")
        else:
            logger.error(f"‚ùå Unknown poll type '{poll_type}' for poll #{poll_id}")
            
    except Exception as e:
        logger.error(f"Error scheduling poll {poll.get('id', 'unknown')}: {e}")

def schedule_all_polls(job_queue):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞.
    """
    polls = load_polls()
    logger.info(f"üîç schedule_all_polls: Loaded {len(polls)} polls from file")
    
    active_polls = []
    for poll in polls:
        poll_id = poll.get('id', 'unknown')
        poll_status = poll.get('status', 'unknown')
        logger.info(f"üîç Poll #{poll_id}: status='{poll_status}'")
        
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ 'Active'
        if poll.get("status") == "Active":
            logger.info(f"‚úÖ Poll #{poll_id} is active (status: '{poll_status}'), calling schedule_poll")
            active_polls.append(poll)
            schedule_poll(job_queue, poll)
        else:
            logger.info(f"‚ùå Poll #{poll_id} is not active (status: '{poll_status}') - only 'Active' polls are scheduled")
    
    logger.info(f"üìä schedule_all_polls: Processed {len(active_polls)} active polls out of {len(polls)} total")

def reschedule_all_polls(job_queue):
    """
    –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ).
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    current_jobs = job_queue.jobs()
    for job in current_jobs:
        if hasattr(job, 'name') and job.name and job.name.startswith('poll_'):
            job.schedule_removal()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
    schedule_all_polls(job_queue)
    logger.info("All polls rescheduled")

def schedule_all_reminders(job_queue):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤—ã–≤–∞–µ—Ç –∏—Ö.
    """
    try:
        reminders = load_reminders()
        for reminder in reminders:
            schedule_reminder(job_queue, reminder)
    except Exception as e:
        logger.error(f"Error scheduling all reminders: {e}")

def reschedule_all_reminders(job_queue):
    """
    –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)
    """
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name and job.name.startswith('reminder_'):
                job.schedule_removal()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        schedule_all_reminders(job_queue)
    except Exception as e:
        logger.error(f"Error rescheduling reminders: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ ---

def ensure_subscribed_chats_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç subscribed_chats.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω
        with open("subscribed_chats.json", "r") as f:
            chats = json.load(f)
            if chats and len(chats) > 0:
                logger.info(f"‚úÖ Found {len(chats)} existing subscribed chats")
                return True  # –§–∞–π–ª –≤ –ø–æ—Ä—è–¥–∫–µ
    except (FileNotFoundError, json.JSONDecodeError, TypeError):
        pass  # –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sheets
    logger.warning("‚ö†Ô∏è subscribed_chats.json is missing or empty. Attempting restore from Google Sheets...")
    logger.info(f"üîç Google Sheets availability check:")
    logger.info(f"   SHEETS_AVAILABLE: {SHEETS_AVAILABLE}")
    logger.info(f"   sheets_manager exists: {sheets_manager is not None}")
    
    if sheets_manager:
        logger.info(f"   sheets_manager.is_initialized: {sheets_manager.is_initialized}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        sheets_id = os.environ.get('GOOGLE_SHEETS_ID')
        sheets_creds = os.environ.get('GOOGLE_SHEETS_CREDENTIALS')
        logger.info(f"   GOOGLE_SHEETS_ID present: {bool(sheets_id)}")
        logger.info(f"   GOOGLE_SHEETS_CREDENTIALS present: {bool(sheets_creds)}")
        
        if sheets_id:
            logger.info(f"   Using Sheet ID: {sheets_id[:20]}...{sheets_id[-10:] if len(sheets_id) > 30 else sheets_id}")
    
    if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
        if sheets_manager.restore_subscribed_chats_file():
            logger.info("‚úÖ Successfully restored subscribed chats from Google Sheets")
            return True
        else:
            logger.error("‚ùå Failed to restore from Google Sheets")
    else:
        logger.warning("üìµ Google Sheets not available for restoration")
        logger.warning("   This means:")
        logger.warning("   1. Check GOOGLE_SHEETS_ID environment variable")
        logger.warning("   2. Check GOOGLE_SHEETS_CREDENTIALS environment variable") 
        logger.warning("   3. Verify Google Sheets API access")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ fallback —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
    logger.warning("üìù Creating empty subscribed_chats.json as fallback")
    logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤!")
    logger.warning("   –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ:")
    logger.warning("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram —á–∞—Ç–∞—Ö")
    logger.warning("   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
    
    with open("subscribed_chats.json", "w") as f:
        json.dump([], f)
    
    return False

def ensure_reminders_file():
    """üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç reminders.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω
        existing_reminders = load_reminders()
        if existing_reminders and len(existing_reminders) > 0:
            logger.info(f"‚úÖ Found {len(existing_reminders)} existing reminders")
            return True, len(existing_reminders)  # –§–∞–π–ª –≤ –ø–æ—Ä—è–¥–∫–µ
    except Exception:
        pass  # –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sheets –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    logger.warning("‚ö†Ô∏è reminders.json is missing, empty or corrupted. Attempting restore from Google Sheets...")
    logger.info(f"üîç Google Sheets reminders restore check:")
    
    if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
        logger.info("   ‚úÖ Google Sheets available for reminders restore")
        try:
            success, message = sheets_manager.restore_reminders_from_sheets()
            if success:
                restored_reminders = load_reminders()
                restored_count = len(restored_reminders)
                logger.info(f"‚úÖ Successfully restored {restored_count} reminders from Google Sheets")
                return True, restored_count
            else:
                logger.error(f"‚ùå Failed to restore reminders from Google Sheets: {message}")
        except Exception as e:
            logger.error(f"‚ùå Exception during reminders restore: {e}")
    else:
        logger.warning("üìµ Google Sheets not available for reminders restoration")
        logger.warning("   This means:")
        logger.warning("   1. Check GOOGLE_SHEETS_ID environment variable")
        logger.warning("   2. Check GOOGLE_SHEETS_CREDENTIALS environment variable") 
        logger.warning("   3. Verify Google Sheets API access")
        logger.warning("   4. Ensure reminders exist in Google Sheets with 'Active' status")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ fallback
    logger.warning("üìù Creating empty reminders.json as fallback")
    logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!")
    logger.warning("   –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ:")
    logger.warning("   1. –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ /remind, /remind_daily, /remind_weekly")
    logger.warning("   2. –ò–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets –∫–æ–º–∞–Ω–¥–æ–π /restore_reminders")
    
    save_reminders([])
    return False, 0

def ensure_polls_file():
    """üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç polls.json, –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Google Sheets"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        existing_polls = load_polls()
        local_count = len(existing_polls) if existing_polls else 0
        logger.info(f"üìã Found {local_count} existing local polls")
    except Exception:
        existing_polls = []
        local_count = 0
        logger.warning("‚ö†Ô∏è polls.json is missing or corrupted")
    
    # –í–°–ï–ì–î–ê –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Google Sheets –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info(f"üîÑ Attempting to sync polls from Google Sheets on startup...")
    
    if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
        logger.info("   ‚úÖ Google Sheets available for polls sync")
        try:
            success, message = sheets_manager.restore_polls_from_sheets()
            if success:
                synced_polls = load_polls()
                synced_count = len(synced_polls)
                
                if synced_count != local_count:
                    logger.info(f"üîÑ Startup sync: Updated polls {local_count} ‚Üí {synced_count}")
                    logger.info(f"‚úÖ Successfully synced {synced_count} polls from Google Sheets")
                else:
                    logger.info(f"‚úÖ Polls already in sync ({synced_count} items)")
                
                return True, synced_count
            else:
                logger.error(f"‚ùå Failed to sync polls from Google Sheets: {message}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                if local_count > 0:
                    logger.info(f"üìã Using {local_count} local polls as fallback")
                    return True, local_count
        except Exception as e:
            logger.error(f"‚ùå Exception during polls sync: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if local_count > 0:
                logger.info(f"üìã Using {local_count} local polls as fallback")
                return True, local_count
    else:
        logger.warning("üìµ Google Sheets not available for polls sync")
        logger.warning("   This means:")
        logger.warning("   1. Check GOOGLE_SHEETS_ID environment variable")
        logger.warning("   2. Check GOOGLE_SHEETS_CREDENTIALS environment variable") 
        logger.warning("   3. Verify Google Sheets API access")
        logger.warning("   4. Ensure polls exist in Google Sheets with 'Active' status")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if local_count > 0:
            logger.info(f"üìã Using {local_count} local polls (Google Sheets unavailable)")
            return True, local_count
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∏ Google Sheets
    logger.warning("üìù Creating empty polls.json as fallback")
    logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!")
    logger.warning("   –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ:")
    logger.warning("   1. –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ /poll, /poll_daily, /poll_weekly")
    logger.warning("   2. –ò–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets –∫–æ–º–∞–Ω–¥–æ–π /restore_polls")
    
    save_polls([])
    return False, 0

def auto_sync_subscribed_chats(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è subscribed_chats.json —Å Google Sheets –∫–∞–∂–¥—ã–π —á–∞—Å"""
    try:
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"üîÑ Starting hourly sync at {moscow_time}")
        
        if SHEETS_AVAILABLE and sheets_manager:
            success = sheets_manager.sync_subscribed_chats_from_sheets()
            if success:
                logger.info(f"‚úÖ Hourly sync completed successfully at {moscow_time}")
            else:
                logger.warning(f"‚ö†Ô∏è Hourly sync had issues at {moscow_time}")
        else:
            logger.warning(f"üìµ Google Sheets not available for sync at {moscow_time}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in hourly sync: {e}")

def auto_sync_reminders(context: CallbackContext):
    """üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å Google Sheets –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""
    try:
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"üîÑ Starting reminders auto-sync at {moscow_time}")
        
        if not SHEETS_AVAILABLE or not sheets_manager or not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not available for reminders sync at {moscow_time}")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            current_reminders = load_reminders()
            current_count = len(current_reminders)
            
            logger.info(f"üìã Current local reminders: {current_count}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ Google Sheets
            success, message = sheets_manager.restore_reminders_from_sheets()
            
            if success:
                synced_reminders = load_reminders()
                synced_count = len(synced_reminders)
                
                if synced_count != current_count:
                    logger.info(f"üîÑ Auto-sync: Updated reminders {current_count} ‚Üí {synced_count}")
                    logger.info(f"üõ°Ô∏è File completely overwritten - no duplicates possible")
                    
                    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    reschedule_all_reminders(context.dispatcher.job_queue)
                    logger.info(f"‚úÖ Reminders rescheduled after auto-sync at {moscow_time}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    active_jobs_after = check_active_jobs(context.dispatcher.job_queue)
                    logger.info(f"üìä Active jobs after auto-sync: {active_jobs_after}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
                    if sheets_manager.is_initialized:
                        try:
                            sheets_manager.log_operation(
                                timestamp=moscow_time,
                                action="AUTO_SYNC_REMINDERS",
                                user_id="SYSTEM",
                                username="AutoSync",
                                chat_id=0,
                                details=f"Auto-sync updated reminders: {current_count} ‚Üí {synced_count}, active jobs: {active_jobs_after}, no duplicates",
                                reminder_id=""
                            )
                        except:
                            pass
                else:
                    logger.info(f"‚úÖ Auto-sync: Reminders already in sync ({current_count} items) at {moscow_time}")
                    logger.info(f"üõ°Ô∏è No changes needed - all reminders unique")
            else:
                logger.warning(f"‚ö†Ô∏è Auto-sync reminders failed at {moscow_time}: {message}")
                
                # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if current_count == 0:
                    logger.warning("üö® CRITICAL: No local reminders AND auto-sync failed!")
                    logger.warning("   This means NO reminders will be sent until manual intervention")
                    logger.warning("   Recommended action: use /restore_reminders command")
                
        except Exception as e:
            logger.error(f"‚ùå Error during reminders auto-sync: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            try:
                current_reminders = load_reminders()
                if len(current_reminders) == 0:
                    logger.error("üö® CRITICAL ERROR: No reminders available after auto-sync failure!")
            except:
                logger.error("üö® CRITICAL ERROR: Cannot access reminders file!")
            
    except Exception as e:
        logger.error(f"‚ùå Critical error in auto_sync_reminders: {e}")

def auto_sync_polls(context: CallbackContext):
    """üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π —Å Google Sheets –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    try:
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"üîÑ Starting polls auto-sync at {moscow_time}")
        
        if not SHEETS_AVAILABLE or not sheets_manager or not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not available for polls sync at {moscow_time}")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            current_polls = load_polls()
            current_count = len(current_polls)
            
            logger.info(f"üìã Current local polls: {current_count}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ Google Sheets
            success, message = sheets_manager.restore_polls_from_sheets()
            
            if success:
                synced_polls = load_polls()
                synced_count = len(synced_polls)
                
                if synced_count != current_count:
                    logger.info(f"üîÑ Auto-sync: Updated polls {current_count} ‚Üí {synced_count}")
                    logger.info(f"üõ°Ô∏è File completely overwritten - no duplicates possible")
                    
                    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                    reschedule_all_polls(context.dispatcher.job_queue)
                    logger.info(f"‚úÖ Polls rescheduled after auto-sync at {moscow_time}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    active_jobs_after = check_active_jobs(context.dispatcher.job_queue)
                    logger.info(f"üìä Active jobs after polls auto-sync: {active_jobs_after}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
                    if sheets_manager.is_initialized:
                        try:
                            sheets_manager.log_operation(
                                timestamp=moscow_time,
                                action="AUTO_SYNC_POLLS",
                                user_id="SYSTEM",
                                username="AutoSync",
                                chat_id=0,
                                details=f"Auto-sync updated polls: {current_count} ‚Üí {synced_count}, active jobs: {active_jobs_after}, no duplicates",
                                reminder_id=""
                            )
                        except:
                            pass
                else:
                    logger.info(f"‚úÖ Auto-sync: Polls already in sync ({current_count} items) at {moscow_time}")
                    logger.info(f"üõ°Ô∏è No changes needed - all polls unique")
            else:
                logger.warning(f"‚ö†Ô∏è Auto-sync polls failed at {moscow_time}: {message}")
                
                # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                if current_count == 0:
                    logger.warning("üö® CRITICAL: No local polls AND auto-sync failed!")
                    logger.warning("   This means NO polls will be sent until manual intervention")
                    logger.warning("   Recommended action: use /restore_polls command")
                
        except Exception as e:
            logger.error(f"‚ùå Error during polls auto-sync: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            try:
                current_polls = load_polls()
                if len(current_polls) == 0:
                    logger.error("üö® CRITICAL ERROR: No polls available after auto-sync failure!")
            except:
                logger.error("üö® CRITICAL ERROR: Cannot access polls file!")
            
    except Exception as e:
        logger.error(f"‚ùå Critical error in auto_sync_polls: {e}")


def check_active_jobs(job_queue):
    """üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        current_jobs = job_queue.jobs()
        reminder_jobs = [job for job in current_jobs if hasattr(job, 'name') and job.name and job.name.startswith('reminder_')]
        poll_jobs = [job for job in current_jobs if hasattr(job, 'name') and job.name and job.name.startswith('poll_')]
        
        logger.info(f"üìä Active reminder jobs: {len(reminder_jobs)}")
        logger.info(f"üìä Active poll jobs: {len(poll_jobs)}")
        
        if len(reminder_jobs) > 0:
            logger.info("üìã Active reminder jobs list:")
            for job in reminder_jobs:
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ next_run
                try:
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        next_run = None
                        if hasattr(job, 'next_run_time') and job.next_run_time:
                            next_run = job.next_run_time
                        elif hasattr(job, 'next_run') and job.next_run:
                            next_run = job.next_run
                        elif hasattr(job, 'trigger'):
                            try:
                                from datetime import datetime
                                import pytz
                                utc_now = datetime.now(pytz.UTC)
                                next_run = job.trigger.get_next_fire_time(None, utc_now)
                            except: pass
                        
                        if next_run:
                            next_run_moscow = utc_to_moscow_time(next_run)
                            logger.info(f"   ‚Ä¢ {job.name}: next run at {next_run_moscow}")
                        else:
                            logger.info(f"   ‚Ä¢ {job.name}: scheduled (time info unavailable)")
                except Exception as attr_error:
                    logger.info(f"   ‚Ä¢ {job.name}: scheduled (next_run attribute error)")
        else:
            logger.warning("‚ö†Ô∏è NO ACTIVE REMINDER JOBS FOUND!")
            logger.warning("   This means reminders will not be sent!")
            logger.warning("   Possible reasons:")
            logger.warning("   1. reminders.json is empty")
            logger.warning("   2. All reminders are in the past")
            logger.warning("   3. Scheduling failed")
            
        if len(poll_jobs) > 0:
            logger.info("üìã Active poll jobs list:")
            for job in poll_jobs:
                try:
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        next_run = None
                        if hasattr(job, 'next_run_time') and job.next_run_time:
                            next_run = job.next_run_time
                        elif hasattr(job, 'next_run') and job.next_run:
                            next_run = job.next_run
                        elif hasattr(job, 'trigger'):
                            try:
                                from datetime import datetime
                                import pytz
                                utc_now = datetime.now(pytz.UTC)
                                next_run = job.trigger.get_next_fire_time(None, utc_now)
                            except: pass
                        
                        if next_run:
                            next_run_moscow = utc_to_moscow_time(next_run)
                            logger.info(f"   ‚Ä¢ {job.name}: next run at {next_run_moscow}")
                        else:
                            logger.info(f"   ‚Ä¢ {job.name}: scheduled (time info unavailable)")
                except Exception as attr_error:
                    logger.info(f"   ‚Ä¢ {job.name}: scheduled (next_run attribute error)")
        else:
            logger.warning("‚ö†Ô∏è NO ACTIVE POLL JOBS FOUND!")
            logger.warning("   This means polls will not be sent!")
            logger.warning("   Possible reasons:")
            logger.warning("   1. polls.json is empty")
            logger.warning("   2. All polls are in the past")
            logger.warning("   3. Scheduling failed")
            
        return len(reminder_jobs), len(poll_jobs)
        
    except Exception as e:
        logger.error(f"‚ùå Error checking active jobs: {e}")
        return 0, 0

def emergency_restore_subscribed_chats(context: CallbackContext):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        logger.warning("üö® Emergency restore triggered - checking subscribed_chats.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
                if chats and len(chats) > 0:
                    logger.info(f"üìã Current file contains {len(chats)} chats - no restore needed")
                    return
        except:
            pass
        
        # –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        logger.warning("üîß Attempting emergency restore from Google Sheets")
        ensure_subscribed_chats_file()
        
    except Exception as e:
        logger.error(f"‚ùå Error in emergency restore: {e}")

def bot_status(update: Update, context: CallbackContext):
    """üÜï –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    try:
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S MSK")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        uptime_info = ""
        if BOT_START_TIME:
            uptime_delta = get_moscow_time() - BOT_START_TIME
            hours = uptime_delta.seconds // 3600
            minutes = (uptime_delta.seconds % 3600) // 60
            if uptime_delta.days > 0:
                uptime_info = f"‚è±Ô∏è <i>–†–∞–±–æ—Ç–∞–µ—Ç: {uptime_delta.days}–¥ {hours}—á {minutes}–º</i>\n"
            else:
                uptime_info = f"‚è±Ô∏è <i>–†–∞–±–æ—Ç–∞–µ—Ç: {hours}—á {minutes}–º</i>\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            reminders = load_reminders()
            reminders_count = len(reminders)
        except:
            reminders_count = 0
            
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
                chats_count = len(chats)
        except:
            chats_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        current_jobs = context.dispatcher.job_queue.jobs()
        reminder_jobs = [job for job in current_jobs if hasattr(job, 'name') and job.name and job.name.startswith('reminder_')]
        active_jobs_count = len(reminder_jobs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets
        sheets_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        sheets_details = "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        if SHEETS_AVAILABLE and sheets_manager:
            if sheets_manager.is_initialized:
                sheets_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                sheets_details = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            else:
                sheets_status = "‚ö†Ô∏è –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                sheets_details = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        once_count = sum(1 for r in reminders if r.get('type') == 'once')
        daily_count = sum(1 for r in reminders if r.get('type') == 'daily')
        weekly_count = sum(1 for r in reminders if r.get('type') == 'weekly')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = (
            f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n"
            f"‚è∞ <i>{current_time}</i>\n"
            f"{uptime_info}\n"
            
            f"üìã <b>–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminders_count}\n"
            f"  üìÖ –†–∞–∑–æ–≤—ã—Ö: {once_count}\n"
            f"  üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {daily_count}\n"
            f"  üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {weekly_count}\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {chats_count}\n\n"
            
            f"‚öôÔ∏è <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {active_jobs_count}\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if active_jobs_count > 0 else '‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π!'}\n\n"
            
            f"üìä <b>Google Sheets:</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {sheets_status}\n"
            f"‚Ä¢ –î–µ—Ç–∞–ª–∏: {sheets_details}\n\n"
            
            f"üîß <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>\n"
        )
        
        # üÜï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_info = ""
        try:
            now_moscow = get_moscow_time()
            sync_jobs = []
            
            for job in current_jobs:
                if hasattr(job, 'callback') and job.callback:
                    if job.callback.__name__ == 'auto_sync_subscribed_chats':
                        sync_jobs.append(('chats', job, 'üîÑ –ß–∞—Ç—ã', '–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω'))
                    elif job.callback.__name__ == 'auto_sync_reminders':
                        sync_jobs.append(('reminders', job, 'üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', '–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω'))
                    elif job.callback.__name__ == 'ping_self':
                        sync_jobs.append(('ping', job, 'üèì Ping', '–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω'))
            
            if sync_jobs:
                sync_info += f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>\n"
                
                for sync_type, job, name, period in sync_jobs:
                    try:
                        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        next_run = None
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        if hasattr(job, 'next_run_time') and job.next_run_time:
                            next_run = job.next_run_time
                        elif hasattr(job, 'next_run') and job.next_run:
                            next_run = job.next_run
                        elif hasattr(job, 'trigger') and hasattr(job.trigger, 'get_next_fire_time'):
                            try:
                                from datetime import datetime
                                import pytz
                                utc_now = datetime.now(pytz.UTC)
                                next_run = job.trigger.get_next_fire_time(None, utc_now)
                            except: pass
                        
                        if next_run:
                            next_run_moscow = utc_to_moscow_time(next_run)
                            time_diff = next_run_moscow - now_moscow
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            if time_diff.total_seconds() < 0:
                                time_str = "—Å–µ–π—á–∞—Å"
                            elif time_diff.total_seconds() < 60:
                                seconds = int(time_diff.total_seconds())
                                time_str = f"—á–µ—Ä–µ–∑ {seconds}—Å"
                            elif time_diff.total_seconds() < 3600:
                                minutes = int(time_diff.total_seconds() // 60)
                                seconds = int(time_diff.total_seconds() % 60)
                                time_str = f"—á–µ—Ä–µ–∑ {minutes}–º {seconds}—Å"
                            else:
                                hours = int(time_diff.total_seconds() // 3600)
                                minutes = int((time_diff.total_seconds() % 3600) // 60)
                                time_str = f"—á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                            
                            sync_info += f"‚Ä¢ {name}: {time_str} ({period})\n"
                        else:
                            sync_info += f"‚Ä¢ {name}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ({period})\n"
                    except Exception:
                        sync_info += f"‚Ä¢ {name}: –∞–∫—Ç–∏–≤–Ω–æ ({period})\n"
                
                sync_info += "\n"
        except Exception as e:
            logger.error(f"Error getting sync info: {e}")
            sync_info = "üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if reminders_count == 0:
            status_msg += "‚ö†Ô∏è –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restore_reminders\n"
        
        if active_jobs_count == 0:
            status_msg += "üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è!\n"
            status_msg += "üí° –†–µ—à–µ–Ω–∏–µ: /restore_reminders –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        
        if chats_count == 0:
            status_msg += "üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å\n"
            
        if not SHEETS_AVAILABLE or not sheets_manager or not sheets_manager.is_initialized:
            status_msg += "üìµ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ü–ï–†–ï–î –±–ª–∏–∂–∞–π—à–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
        status_msg += f"\n{sync_info}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
        if active_jobs_count > 0:
            status_msg += f"\nüìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
            jobs_info = []
            for job in reminder_jobs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ next_run
                try:
                    if hasattr(job, 'next_run') and job.next_run:
                        next_run_moscow = utc_to_moscow_time(next_run)
                        job_name = job.name.replace('reminder_', '#')
                        jobs_info.append(f"‚Ä¢ {job_name}: {next_run_moscow.strftime('%d.%m %H:%M')}")
                    else:
                        job_name = job.name.replace('reminder_', '#')
                        jobs_info.append(f"‚Ä¢ {job_name}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
                except Exception:
                    job_name = job.name.replace('reminder_', '#')
                    jobs_info.append(f"‚Ä¢ {job_name}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            
            if jobs_info:
                status_msg += "\n".join(jobs_info)
                if active_jobs_count > 3:
                    status_msg += f"\n‚Ä¢ ... –∏ –µ—â—ë {active_jobs_count - 3} –∑–∞–¥–∞–Ω–∏–π"
        
        try:
            update.message.reply_text(status_msg, parse_mode=ParseMode.HTML)
        except:
            # Fallback –±–µ–∑ HTML
            clean_msg = status_msg.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            update.message.reply_text(clean_msg)
            
    except Exception as e:
        logger.error(f"Error in bot_status: {e}")
        try:
            update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞")

def about_bot(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    try:
        about_text = (
            "ü§ñ <b>Telegram –ë–æ—Ç-–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ 2.0</b> üìÖ\n"
            "–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Google Sheets –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–ª—É—á–∞–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º.\n\n"
            
            "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚úÖ –†–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
            "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
            "üåç –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (MSK) ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
            "üì± –†–∞–±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö\n"
            "üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Å—Å—ã–ª–æ–∫\n\n"
            
            "‚ÅâÔ∏è <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?</b>\n"
            "‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º Google –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—É –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Ç. –ø.), –∞ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.\n"
            "‚Äî –£–ª—É—á—à–µ–Ω–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –±–æ—Ç–∞: –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –µ—â—ë –∏ –≤ Google-—Ç–∞–±–ª–∏—Ü–µ, –∏ –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ (—Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π), –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
        )
        
        commands_text = (
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
            
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n"
            "/remind ‚Äî —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/remind_daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/remind_weekly ‚Äî –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
            
            "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "/list_reminders ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "/next ‚Äî –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/del_reminder ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/clear_reminders ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            
            "‚öôÔ∏è <b>–°–µ—Ä–≤–∏—Å–Ω—ã–µ:</b>\n"
            "/start ‚Äî –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ\n"
            "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "/status ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
            "/restore_reminders ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏ —ç—Ç–æ–º –≤ Google-—Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å Active –Ω–∞ –Ω—É–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)\n"
            "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
        )
        
        features_text = (
            "üõ°Ô∏è <b>–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å:</b>\n"
            "üìä –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
            "üîÑ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö\n"
            "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n"
            "üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n"
            "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç\n"
            "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /remind\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /list_reminders\n\n"
            
            "üö® <b>–í–∞–∂–Ω–æ:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –ª–∏—á–∫–∏ –∏ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –∏ –≥–¥–µ —Å–æ–∑–¥–∞–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n\n"
            
            "üí° <b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            "/remind\n"
            "2025-07-15 09:00\n"
            "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –º–∏—Ç —Å –æ—Ç–¥–µ–ª–æ–º –≤ 18:00\n\n"
            
            "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–¥—ë—Ç –ø–æ—à–∞–≥–æ–≤–æ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –∏ –∫–∞–∫ –≤–≤–µ—Å—Ç–∏.\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ - –ø–∏—à–∏—Ç–µ..\n"
            "–ü—Ä–æ—Å—å–±–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—â–∏–µ –Ω–∞ —Å–∞–π—Ç—ã –ú–ë –ë–ê –∏ —Ç–ø, –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± —ç—Ç–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö, –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –±–ª–æ–∫–∏—Ä—É—é—Ç –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Telegram!\n\n"
            
            "ü§ñ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!</b>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
        try:
            update.message.reply_text(about_text, parse_mode=ParseMode.HTML)
            update.message.reply_text(commands_text, parse_mode=ParseMode.HTML)
            update.message.reply_text(features_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            # Fallback –±–µ–∑ HTML –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
            logger.error(f"Error sending about message with HTML: {e}")
            clean_about = about_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            clean_commands = commands_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            clean_features = features_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            
            update.message.reply_text(clean_about)
            update.message.reply_text(clean_commands)
            update.message.reply_text(clean_features)
            
    except Exception as e:
        logger.error(f"Error in about_bot command: {e}")
        try:
            update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")

def unsubscribe_user(chat_id, user_name="Unknown", reason="USER_REQUEST"):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ Google Sheets)
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            chats = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        if chat_id in chats:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            chats.remove(chat_id)
            save_chats(chats)
            
            logger.info(f"üö´ User {chat_id} ({user_name}) unsubscribed: {reason}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –≤ Google Sheets
                    moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                    sheets_manager.log_operation(
                        timestamp=moscow_time,
                        action="CHAT_UNSUBSCRIBE",
                        user_id="SYSTEM",
                        username="AutoUnsubscribe",
                        chat_id=chat_id,
                        details=f"User unsubscribed: {user_name}, Reason: {reason}",
                        reminder_id=""
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ Google Sheets
                    sheets_manager.sync_subscribed_chats_to_sheets(chats)
                    
                    # –ü–æ–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                    sheets_manager.update_chat_stats(chat_id, user_name, "unsubscribed", None, status="Unsubscribed")
                    
                    logger.info(f"üìä Successfully synced unsubscription of {chat_id} to Google Sheets")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error syncing unsubscription to Google Sheets: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            
            return True, "SUCCESS"
        else:
            logger.warning(f"‚ö†Ô∏è User {chat_id} was not subscribed (unsubscribe attempt)")
            return False, "NOT_SUBSCRIBED"
            
    except Exception as e:
        logger.error(f"‚ùå Error unsubscribing user {chat_id}: {e}")
        return False, f"ERROR: {str(e)}"

def unsubscribe_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –±–æ—Ç–∞
    """
    try:
        chat_id = update.effective_chat.id
        user = update.effective_user
        user_name = user.username or user.first_name or "Unknown"
        
        success, result = unsubscribe_user(chat_id, user_name, "COMMAND")
        
        if success:
            try:
                update.message.reply_text(
                    "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞</b>\n\n"
                    "üö´ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                    "üí¨ –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞\n\n"
                    "üö´ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                    "üí¨ –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
        else:
            if result == "NOT_SUBSCRIBED":
                try:
                    update.message.reply_text(
                        "‚ÑπÔ∏è <b>–í—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞</b>\n\n"
                        "üí¨ –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    update.message.reply_text(
                        "‚ÑπÔ∏è –í—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞\n\n"
                        "üí¨ –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                    )
            else:
                try:
                    update.message.reply_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ</b>\n\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ")
                    
    except Exception as e:
        logger.error(f"Error in unsubscribe command: {e}")
        try:
            update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø–∏—Å–∫–∏</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø–∏—Å–∫–∏")

def handle_unsubscribe_button(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ INLINE –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    """
    try:
        query = update.callback_query
        query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        
        chat_id = query.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        user_name = query.from_user.username or query.from_user.first_name or "Unknown"
        
        success, result = unsubscribe_user(chat_id, user_name, "INLINE_BUTTON")
        
        if success:
            try:
                query.edit_message_text(
                    "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞</b>\n\n"
                    "üö´ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                    "üí¨ –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode=ParseMode.HTML
                )
            except:
                query.edit_message_text(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞\n\n"
                    "üö´ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                    "üí¨ –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
        else:
            if result == "NOT_SUBSCRIBED":
                try:
                    query.edit_message_text(
                        "‚ÑπÔ∏è <b>–í—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞</b>\n\n"
                        "üí¨ –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    query.edit_message_text(
                        "‚ÑπÔ∏è –í—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞\n\n"
                        "üí¨ –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                    )
            else:
                try:
                    query.edit_message_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ</b>\n\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ")
                    
    except Exception as e:
        logger.error(f"Error in unsubscribe button handler: {e}")
        try:
            update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ", show_alert=True)
        except:
            pass

# –§—É–Ω–∫—Ü–∏—è handle_poll_results_button —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def monitor_scheduler_health(context: CallbackContext):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ Google Sheets –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    """
    try:
        moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S MSK")
        logger.info(f"üîç Scheduler health check started at {moscow_time}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        job_queue = context.job_queue
        active_jobs = check_active_jobs(job_queue)
        
        reminder_jobs = active_jobs.get('reminder_jobs', 0)
        poll_jobs = active_jobs.get('poll_jobs', 0)
        
        logger.info(f"üìä Current active jobs: {reminder_jobs} reminders, {poll_jobs} polls")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if poll_jobs == 0:
            logger.warning(f"‚ö†Ô∏è No active poll jobs detected! Attempting emergency restore...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    logger.info(f"üîß Attempting emergency poll restore from Google Sheets...")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ Google Sheets
                    active_polls = sheets_manager.get_active_polls()
                    
                    if active_polls:
                        logger.info(f"üìä Found {len(active_polls)} active polls in Google Sheets")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                        save_polls(active_polls)
                        
                        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                        reschedule_all_polls(job_queue)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        updated_jobs = check_active_jobs(job_queue)
                        new_poll_jobs = updated_jobs.get('poll_jobs', 0)
                        
                        logger.info(f"‚úÖ Emergency restore completed: {new_poll_jobs} poll jobs scheduled")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
                        sheets_manager.log_poll_action(
                            "EMERGENCY_RESTORE", 
                            "SYSTEM", 
                            "HealthMonitor", 
                            0, 
                            f"Emergency restore: {new_poll_jobs} polls restored from Google Sheets",
                            "HEALTH_CHECK"
                        )
                        
                    else:
                        logger.info(f"üì≠ No active polls found in Google Sheets")
                        
                except Exception as e:
                    logger.error(f"‚ùå Emergency poll restore failed: {e}")
            else:
                logger.warning(f"üìµ Google Sheets not available for emergency restore")
        else:
            logger.info(f"‚úÖ Scheduler health check passed: {poll_jobs} poll jobs active")
            
    except Exception as e:
        logger.error(f"‚ùå Error in scheduler health monitor: {e}")

def main():
    try:
        global BOT_START_TIME
        BOT_START_TIME = get_moscow_time()
        
        token = os.environ['BOT_TOKEN']
        port = int(os.environ.get('PORT', 8000))
        updater = Updater(token=token, use_context=True)
        
        # Reset any existing webhook so polling can start cleanly
        try:
            res = updater.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted: %s", res)
        except Exception as e:
            logger.error("Error deleting webhook: %s", e)
        
        dp = updater.dispatcher
        
        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ò –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–î–ü–ò–°–ö–ò –ü–†–ò –ó–ê–ü–£–°–ö–ï
        logger.info("üîß Checking subscribed_chats.json...")
        ensure_subscribed_chats_file()
        
        # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ò –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ü–†–ò –ó–ê–ü–£–°–ö–ï
        logger.info("üîß Checking reminders.json...")
        reminders_restored, reminders_count = ensure_reminders_file()
        if reminders_restored:
            logger.info(f"‚úÖ Reminders status: {reminders_count} reminders ready for scheduling")
        else:
            logger.warning(f"‚ö†Ô∏è Reminders status: starting with empty reminders list")
            logger.warning("üí° TIP: Use /restore_reminders command to recover data from Google Sheets")
        
        # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ò –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ü–†–ò –ó–ê–ü–£–°–ö–ï
        logger.info("üîß Checking polls.json...")
        polls_restored, polls_count = ensure_polls_file()
        if polls_restored:
            logger.info(f"‚úÖ Polls status: {polls_count} polls ready for scheduling")
        else:
            logger.warning(f"‚ö†Ô∏è Polls status: starting with empty polls list")
            logger.warning("üí° TIP: Use /restore_polls command to recover data from Google Sheets")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ü–ï–†–í–´–ú–ò
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("test", test))
        dp.add_handler(CommandHandler("about", about_bot))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        
        conv = ConversationHandler(
            entry_points=[CommandHandler("remind", start_add_one_reminder)],
            states={
                REMINDER_DATE: [MessageHandler(Filters.text & ~Filters.command, receive_reminder_datetime)],
                REMINDER_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_reminder_text)],
            },
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv)
        
        conv_daily = ConversationHandler(
            entry_points=[CommandHandler("remind_daily", start_add_daily_reminder)],
            states={
                DAILY_TIME: [MessageHandler(Filters.text & ~Filters.command, receive_daily_time)],
                DAILY_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_daily_text)],
            },
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv_daily)

        conv_weekly = ConversationHandler(
            entry_points=[CommandHandler("remind_weekly", start_add_weekly_reminder)],
            states={
                WEEKLY_DAY: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_day)],
                WEEKLY_TIME: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_time)],
                WEEKLY_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_text)],
            },
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv_weekly)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
        conv_poll = ConversationHandler(
            entry_points=[CommandHandler("poll", start_add_one_poll)],
            states={
                POLL_DATE: [MessageHandler(Filters.text & ~Filters.command, receive_poll_datetime)],
                POLL_QUESTION: [MessageHandler(Filters.text & ~Filters.command, receive_poll_question)],
                POLL_OPTIONS: [MessageHandler(Filters.text & ~Filters.command, receive_poll_options)],
            },
            fallbacks=[CommandHandler("cancel", cancel_poll)],
            allow_reentry=True,
        )
        dp.add_handler(conv_poll)
        
        conv_daily_poll = ConversationHandler(
            entry_points=[CommandHandler("daily_poll", start_add_daily_poll)],
            states={
                DAILY_POLL_TIME: [MessageHandler(Filters.text & ~Filters.command, receive_daily_poll_time)],
                DAILY_POLL_QUESTION: [MessageHandler(Filters.text & ~Filters.command, receive_daily_poll_question)],
                DAILY_POLL_OPTIONS: [MessageHandler(Filters.text & ~Filters.command, receive_daily_poll_options)],
            },
            fallbacks=[CommandHandler("cancel", cancel_poll)],
            allow_reentry=True,
        )
        dp.add_handler(conv_daily_poll)
        
        conv_weekly_poll = ConversationHandler(
            entry_points=[CommandHandler("weekly_poll", start_add_weekly_poll)],
            states={
                WEEKLY_POLL_DAY: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_poll_day)],
                WEEKLY_POLL_TIME: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_poll_time)],
                WEEKLY_POLL_QUESTION: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_poll_question)],
                WEEKLY_POLL_OPTIONS: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_poll_options)],
            },
            fallbacks=[CommandHandler("cancel", cancel_poll)],
            allow_reentry=True,
        )
        dp.add_handler(conv_weekly_poll)
        
        dp.add_handler(CommandHandler("list_reminders", list_reminders))
        dp.add_handler(CommandHandler("list_polls", list_polls))
        
        conv_del = ConversationHandler(
            entry_points=[CommandHandler("del_reminder", start_delete_reminder)],
            states={REM_DEL_ID: [MessageHandler(Filters.text & ~Filters.command, confirm_delete_reminder)]},
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv_del)
        
        conv_del_poll = ConversationHandler(
            entry_points=[CommandHandler("del_poll", start_delete_poll)],
            states={POLL_DEL_ID: [MessageHandler(Filters.text & ~Filters.command, confirm_delete_poll)]},
            fallbacks=[CommandHandler("cancel", cancel_poll)],
            allow_reentry=True,
        )
        dp.add_handler(conv_del_poll)
        
        dp.add_handler(CommandHandler("clear_reminders", clear_reminders))
        dp.add_handler(CommandHandler("clear_polls", clear_polls))
        dp.add_handler(CommandHandler("delete_all_polls", clear_polls))
        dp.add_handler(CommandHandler("restore", restore_reminders))
        dp.add_handler(CommandHandler("restore_polls", restore_polls))
        dp.add_handler(CommandHandler("next", next_notification))
        dp.add_handler(CommandHandler("status", bot_status))
        dp.add_handler(CommandHandler("unsubscribe", unsubscribe_command))  # üÜï –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
        
        # üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ INLINE –∫–Ω–æ–ø–æ–∫
        dp.add_handler(CallbackQueryHandler(handle_unsubscribe_button, pattern="^unsubscribe$"))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.add_error_handler(error_handler)

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        logger.info("üìã Scheduling all reminders...")
        schedule_all_reminders(updater.job_queue)
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        logger.info("üó≥Ô∏è Scheduling all polls...")
        schedule_all_polls(updater.job_queue)
        
        # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ü–û–°–õ–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø
        active_reminder_jobs, active_poll_jobs = check_active_jobs(updater.job_queue)
        if active_reminder_jobs == 0:
            logger.warning("‚ö†Ô∏è CRITICAL: No active reminder jobs scheduled!")
            logger.warning("   Attempting immediate reminders restore...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    success, message = sheets_manager.restore_reminders_from_sheets()
                    if success:
                        logger.info("‚úÖ Emergency restore successful, rescheduling...")
                        reschedule_all_reminders(updater.job_queue)
                        final_reminder_jobs, final_poll_jobs = check_active_jobs(updater.job_queue)
                        logger.info(f"üîÑ After emergency restore: {final_reminder_jobs} reminder jobs, {final_poll_jobs} poll jobs")
                    else:
                        logger.error(f"‚ùå Emergency restore failed: {message}")
                except Exception as e:
                    logger.error(f"‚ùå Exception during emergency restore: {e}")
        
        if active_poll_jobs == 0:
            logger.warning("‚ö†Ô∏è CRITICAL: No active poll jobs scheduled!")
            logger.warning("   Attempting immediate polls restore...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    success, message = sheets_manager.restore_polls_from_sheets()
                    if success:
                        logger.info("‚úÖ Emergency polls restore successful, rescheduling...")
                        reschedule_all_polls(updater.job_queue)
                        final_reminder_jobs, final_poll_jobs = check_active_jobs(updater.job_queue)
                        logger.info(f"üîÑ After emergency polls restore: {final_reminder_jobs} reminder jobs, {final_poll_jobs} poll jobs")
                    else:
                        logger.error(f"‚ùå Emergency polls restore failed: {message}")
                except Exception as e:
                    logger.error(f"‚ùå Exception during emergency polls restore: {e}")
            else:
                logger.warning("üìµ Google Sheets not available for emergency polls restore")
                logger.warning("   This means polls will not be sent!")
                logger.warning("   Check if polls.json contains valid future polls")
        
        # –î–æ–±–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
        updater.job_queue.run_repeating(ping_self, interval=300, first=30)
        
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        updater.job_queue.run_repeating(monitor_scheduler_health, interval=600, first=60)
        logger.info("üîç Scheduler health monitoring enabled (every 10 minutes)")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤—ã—à–µ
        
        # ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–î–ü–ò–°–û–ö –ö–ê–ñ–î–´–ï 5 –ú–ò–ù–£–¢
        updater.job_queue.run_repeating(auto_sync_subscribed_chats, interval=300, first=300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω
        logger.info("üîÑ Scheduled 5-minute subscribed chats sync")
        
        # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ö–ê–ñ–î–´–ï 5 –ú–ò–ù–£–¢
        updater.job_queue.run_repeating(auto_sync_reminders, interval=300, first=300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω
        logger.info("üîÑ Scheduled 5-minute reminders auto-sync")
        
        # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ì–û–õ–û–°–û–í–ê–ù–ò–ô –ö–ê–ñ–î–´–ï 5 –ú–ò–ù–£–¢
        updater.job_queue.run_repeating(auto_sync_polls, interval=300, first=300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω
        logger.info("üîÑ Scheduled 5-minute polls auto-sync")

        # Health check server for Render free tier
        threading.Thread(target=start_health_server, daemon=True).start()
        
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í
        logger.info("üöÄ Starting bot with AGGRESSIVE conflict prevention...")
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—á–∏—Å—Ç–∫–∏ webhook –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for attempt in range(3):
            try:
                result = updater.bot.delete_webhook(drop_pending_updates=True)
                logger.info(f"‚úÖ Webhook deletion attempt {attempt + 1}: {result}")
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Webhook deletion attempt {attempt + 1} failed: {e}")
                time.sleep(1)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        logger.info("‚è≥ Waiting for previous bot instances to terminate...")
        time.sleep(10)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        max_start_attempts = 3
        for start_attempt in range(max_start_attempts):
            try:
                logger.info(f"üöÄ Bot start attempt {start_attempt + 1}/{max_start_attempts}")
                updater.start_polling(
                    drop_pending_updates=True, 
                    timeout=20,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    read_latency=10,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–µ–Ω–∏—è
                    bootstrap_retries=3  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                )
                logger.info("‚úÖ Bot started successfully in polling mode")
                break
            except Conflict as conflict_error:
                logger.error(f"üö® Conflict on start attempt {start_attempt + 1}: {conflict_error}")
                if start_attempt < max_start_attempts - 1:
                    wait_time = (start_attempt + 1) * 15  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.warning(f"‚è≥ Waiting {wait_time} seconds before retry...")
                    time.sleep(wait_time)
                else:
                    logger.error("‚ùå All start attempts failed due to conflicts!")
                    raise
            except Exception as e:
                logger.error(f"‚ùå Start attempt {start_attempt + 1} failed: {e}")
                if start_attempt < max_start_attempts - 1:
                    time.sleep(5)
                else:
                    raise
            
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        time.sleep(30)
        final_reminder_jobs, final_poll_jobs = check_active_jobs(updater.job_queue)
        logger.info(f"üîç Final status check: {final_reminder_jobs} reminder jobs active")
        logger.info(f"üîç Final status check: {final_poll_jobs} poll jobs active")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        try:
            with open("subscribed_chats.json", "r") as f:
                final_chats = json.load(f)
                logger.info(f"üì± Final chats check: {len(final_chats)} subscribed chats")
        except:
            logger.warning("‚ö†Ô∏è Final chats check: subscribed_chats.json not accessible")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
        try:
            final_reminders = load_reminders()
            logger.info(f"üìã Final reminders check: {len(final_reminders)} reminders loaded")
        except:
            logger.warning("‚ö†Ô∏è Final reminders check: reminders.json not accessible")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        try:
            final_polls = load_polls()
            logger.info(f"üó≥Ô∏è Final polls check: {len(final_polls)} polls loaded")
        except:
            logger.warning("‚ö†Ô∏è Final polls check: polls.json not accessible")
        
        logger.info("üöÄ Bot startup completed successfully!")
        
        updater.idle()
        
    except Exception as e:
        logger.error(f"Critical error in main: {e}")
        
if __name__ == "__main__":
    main()
